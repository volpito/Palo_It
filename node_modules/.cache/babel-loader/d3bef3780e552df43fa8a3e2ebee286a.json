{"ast":null,"code":"\"use strict\";\n\nvar forEach = require(\"@sinonjs/commons\").prototypes.set.forEach;\n/**\n * Returns `true` when `s1` is a subset of `s2`, `false` otherwise\n *\n * @private\n * @param  {Array|Set}  s1      The target value\n * @param  {Array|Set}  s2      The containing value\n * @param  {Function}  compare A comparison function, should return `true` when\n *                             values are considered equal\n * @returns {boolean} Returns `true` when `s1` is a subset of `s2`, `false`` otherwise\n */\n\n\nfunction isSubset(s1, s2, compare) {\n  var allContained = true;\n  forEach(s1, function (v1) {\n    var includes = false;\n    forEach(s2, function (v2) {\n      if (compare(v2, v1)) {\n        includes = true;\n      }\n    });\n    allContained = allContained && includes;\n  });\n  return allContained;\n}\n\nmodule.exports = isSubset;","map":null,"metadata":{},"sourceType":"module"}