{"ast":null,"code":"\"use strict\";\n\nvar forEach = require(\"@sinonjs/commons\").prototypes.array.forEach;\n\nfunction walkInternal(obj, iterator, context, originalObj, seen) {\n  var proto, prop;\n\n  if (typeof Object.getOwnPropertyNames !== \"function\") {\n    // We explicitly want to enumerate through all of the prototype's properties\n    // in this case, therefore we deliberately leave out an own property check.\n\n    /* eslint-disable-next-line guard-for-in */\n    for (prop in obj) {\n      iterator.call(context, obj[prop], prop, obj);\n    }\n\n    return;\n  }\n\n  forEach(Object.getOwnPropertyNames(obj), function (k) {\n    if (seen[k] !== true) {\n      seen[k] = true;\n      var target = typeof Object.getOwnPropertyDescriptor(obj, k).get === \"function\" ? originalObj : obj;\n      iterator.call(context, k, target);\n    }\n  });\n  proto = Object.getPrototypeOf(obj);\n\n  if (proto) {\n    walkInternal(proto, iterator, context, originalObj, seen);\n  }\n}\n/* Walks the prototype chain of an object and iterates over every own property\n * name encountered. The iterator is called in the same fashion that Array.prototype.forEach\n * works, where it is passed the value, key, and own object as the 1st, 2nd, and 3rd positional\n * argument, respectively. In cases where Object.getOwnPropertyNames is not available, walk will\n * default to using a simple for..in loop.\n *\n * obj - The object to walk the prototype chain for.\n * iterator - The function to be called on each pass of the walk.\n * context - (Optional) When given, the iterator will be called with this object as the receiver.\n */\n\n\nmodule.exports = function walk(obj, iterator, context) {\n  return walkInternal(obj, iterator, context, obj, {});\n};","map":null,"metadata":{},"sourceType":"module"}