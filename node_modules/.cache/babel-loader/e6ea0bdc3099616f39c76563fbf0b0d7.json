{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === \"function\" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== \"function\") { throw new TypeError(\"Super expression must either be null or a function\"); } if (typeof _cache !== \"undefined\") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\n\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf(\"[native code]\") !== -1; }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n/**\n * Headers.js\n *\n * Headers class offers convenient helpers\n */\nimport { types } from 'util';\nimport http from 'http';\nvar validateHeaderName = typeof http.validateHeaderName === 'function' ? http.validateHeaderName : function (name) {\n  if (!/^[\\^`\\-\\w!#$%&'*+.|~]+$/.test(name)) {\n    var error = new TypeError(\"Header name must be a valid HTTP token [\".concat(name, \"]\"));\n    Object.defineProperty(error, 'code', {\n      value: 'ERR_INVALID_HTTP_TOKEN'\n    });\n    throw error;\n  }\n};\nvar validateHeaderValue = typeof http.validateHeaderValue === 'function' ? http.validateHeaderValue : function (name, value) {\n  if (/[^\\t\\u0020-\\u007E\\u0080-\\u00FF]/.test(value)) {\n    var error = new TypeError(\"Invalid character in header content [\\\"\".concat(name, \"\\\"]\"));\n    Object.defineProperty(error, 'code', {\n      value: 'ERR_INVALID_CHAR'\n    });\n    throw error;\n  }\n};\n/**\n * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit\n */\n\n/**\n * This Fetch API interface allows you to perform various actions on HTTP request and response headers.\n * These actions include retrieving, setting, adding to, and removing.\n * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.\n * You can add to this using methods like append() (see Examples.)\n * In all methods of this interface, header names are matched by case-insensitive byte sequence.\n *\n */\n\nvar Headers = /*#__PURE__*/function (_URLSearchParams, _Symbol$toStringTag, _Symbol$iterator, _Symbol$for) {\n  _inherits(Headers, _URLSearchParams);\n\n  var _super = _createSuper(Headers);\n\n  /**\n   * Headers class\n   *\n   * @constructor\n   * @param {HeadersInit} [init] - Response headers\n   */\n  function Headers(init) {\n    var _this;\n\n    _classCallCheck(this, Headers);\n\n    // Validate and normalize init object in [name, value(s)][]\n\n    /** @type {string[][]} */\n    var result = [];\n\n    if (init instanceof Headers) {\n      var raw = init.raw();\n\n      var _loop = function _loop() {\n        var _result;\n\n        var _ref = _Object$entries[_i2];\n        _ref2 = _slicedToArray(_ref, 2);\n        var name = _ref2[0];\n        var values = _ref2[1];\n\n        (_result = result).push.apply(_result, _toConsumableArray(values.map(function (value) {\n          return [name, value];\n        })));\n      };\n\n      for (var _i2 = 0, _Object$entries = Object.entries(raw); _i2 < _Object$entries.length; _i2++) {\n        var _ref2;\n\n        _loop();\n      }\n    } else if (init == null) {// eslint-disable-line no-eq-null, eqeqeq\n      // No op\n    } else if (_typeof(init) === 'object' && !types.isBoxedPrimitive(init)) {\n      var method = init[Symbol.iterator]; // eslint-disable-next-line no-eq-null, eqeqeq\n\n      if (method == null) {\n        var _result2;\n\n        // Record<ByteString, ByteString>\n        (_result2 = result).push.apply(_result2, _toConsumableArray(Object.entries(init)));\n      } else {\n        if (typeof method !== 'function') {\n          throw new TypeError('Header pairs must be iterable');\n        } // Sequence<sequence<ByteString>>\n        // Note: per spec we have to first exhaust the lists then process them\n\n\n        result = _toConsumableArray(init).map(function (pair) {\n          if (_typeof(pair) !== 'object' || types.isBoxedPrimitive(pair)) {\n            throw new TypeError('Each header pair must be an iterable object');\n          }\n\n          return _toConsumableArray(pair);\n        }).map(function (pair) {\n          if (pair.length !== 2) {\n            throw new TypeError('Each header pair must be a name/value tuple');\n          }\n\n          return _toConsumableArray(pair);\n        });\n      }\n    } else {\n      throw new TypeError('Failed to construct \\'Headers\\': The provided value is not of type \\'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');\n    } // Validate and lowercase\n\n\n    result = result.length > 0 ? result.map(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          name = _ref4[0],\n          value = _ref4[1];\n\n      validateHeaderName(name);\n      validateHeaderValue(name, String(value));\n      return [String(name).toLowerCase(), String(value)];\n    }) : undefined;\n    _this = _super.call(this, result); // Returning a Proxy that will lowercase key names, validate parameters and sort keys\n    // eslint-disable-next-line no-constructor-return\n\n    return _possibleConstructorReturn(_this, new Proxy(_assertThisInitialized(_this), {\n      get: function get(target, p, receiver) {\n        switch (p) {\n          case 'append':\n          case 'set':\n            return function (name, value) {\n              validateHeaderName(name);\n              validateHeaderValue(name, String(value));\n              return URLSearchParams.prototype[p].call(target, String(name).toLowerCase(), String(value));\n            };\n\n          case 'delete':\n          case 'has':\n          case 'getAll':\n            return function (name) {\n              validateHeaderName(name);\n              return URLSearchParams.prototype[p].call(target, String(name).toLowerCase());\n            };\n\n          case 'keys':\n            return function () {\n              target.sort();\n              return new Set(URLSearchParams.prototype.keys.call(target)).keys();\n            };\n\n          default:\n            return Reflect.get(target, p, receiver);\n        }\n      }\n      /* c8 ignore next */\n\n    }));\n  }\n\n  _createClass(Headers, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return this.constructor.name;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return Object.prototype.toString.call(this);\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var values = this.getAll(name);\n\n      if (values.length === 0) {\n        return null;\n      }\n\n      var value = values.join(', ');\n\n      if (/^content-encoding$/i.test(name)) {\n        value = value.toLowerCase();\n      }\n\n      return value;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n      var _iterator = _createForOfIteratorHelper(this.keys()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var name = _step.value;\n          Reflect.apply(callback, thisArg, [this.get(name), name, this]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"values\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function values() {\n      var _iterator2, _step2, name;\n\n      return _regeneratorRuntime.wrap(function values$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator2 = _createForOfIteratorHelper(this.keys());\n              _context.prev = 1;\n\n              _iterator2.s();\n\n            case 3:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 9;\n                break;\n              }\n\n              name = _step2.value;\n              _context.next = 7;\n              return this.get(name);\n\n            case 7:\n              _context.next = 3;\n              break;\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator2.e(_context.t0);\n\n            case 14:\n              _context.prev = 14;\n\n              _iterator2.f();\n\n              return _context.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, values, this, [[1, 11, 14, 17]]);\n    })\n    /**\n     * @type {() => IterableIterator<[string, string]>}\n     */\n\n  }, {\n    key: \"entries\",\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function entries() {\n      var _iterator3, _step3, name;\n\n      return _regeneratorRuntime.wrap(function entries$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _iterator3 = _createForOfIteratorHelper(this.keys());\n              _context2.prev = 1;\n\n              _iterator3.s();\n\n            case 3:\n              if ((_step3 = _iterator3.n()).done) {\n                _context2.next = 9;\n                break;\n              }\n\n              name = _step3.value;\n              _context2.next = 7;\n              return [name, this.get(name)];\n\n            case 7:\n              _context2.next = 3;\n              break;\n\n            case 9:\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](1);\n\n              _iterator3.e(_context2.t0);\n\n            case 14:\n              _context2.prev = 14;\n\n              _iterator3.f();\n\n              return _context2.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, entries, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return this.entries();\n    }\n    /**\n     * Node-fetch non-spec method\n     * returning all headers and their values as array\n     * @returns {Record<string, string[]>}\n     */\n\n  }, {\n    key: \"raw\",\n    value: function raw() {\n      var _this2 = this;\n\n      return _toConsumableArray(this.keys()).reduce(function (result, key) {\n        result[key] = _this2.getAll(key);\n        return result;\n      }, {});\n    }\n    /**\n     * For better console.log(headers) and also to convert Headers into Node.js Request compatible format\n     */\n\n  }, {\n    key: _Symbol$for,\n    value: function value() {\n      var _this3 = this;\n\n      return _toConsumableArray(this.keys()).reduce(function (result, key) {\n        var values = _this3.getAll(key); // Http.request() only supports string as Host header.\n        // This hack makes specifying custom Host header possible.\n\n\n        if (key === 'host') {\n          result[key] = values[0];\n        } else {\n          result[key] = values.length > 1 ? values : values[0];\n        }\n\n        return result;\n      }, {});\n    }\n  }]);\n\n  return Headers;\n}( /*#__PURE__*/_wrapNativeSuper(URLSearchParams), Symbol.toStringTag, Symbol.iterator, Symbol.for('nodejs.util.inspect.custom'));\n/**\n * Re-shaping object for Web IDL tests\n * Only need to do it for overridden methods\n */\n\n\nexport { Headers as default };\nObject.defineProperties(Headers.prototype, ['get', 'entries', 'forEach', 'values'].reduce(function (result, property) {\n  result[property] = {\n    enumerable: true\n  };\n  return result;\n}, {}));\n/**\n * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do\n * not conform to HTTP grammar productions.\n * @param {import('http').IncomingMessage['rawHeaders']} headers\n */\n\nexport function fromRawHeaders() {\n  var headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return new Headers(headers // Split into pairs\n  .reduce(function (result, value, index, array) {\n    if (index % 2 === 0) {\n      result.push(array.slice(index, index + 2));\n    }\n\n    return result;\n  }, []).filter(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n        name = _ref6[0],\n        value = _ref6[1];\n\n    try {\n      validateHeaderName(name);\n      validateHeaderValue(name, String(value));\n      return true;\n    } catch (_unused) {\n      return false;\n    }\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}