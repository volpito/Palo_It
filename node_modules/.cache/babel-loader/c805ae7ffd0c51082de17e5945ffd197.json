{"ast":null,"code":"\"use strict\";\n\nvar functionName = require(\"@sinonjs/commons\").functionName;\n\nvar join = require(\"@sinonjs/commons\").prototypes.array.join;\n\nvar map = require(\"@sinonjs/commons\").prototypes.array.map;\n\nvar stringIndexOf = require(\"@sinonjs/commons\").prototypes.string.indexOf;\n\nvar valueToString = require(\"@sinonjs/commons\").valueToString;\n\nvar matchObject = require(\"./match-object\");\n\nvar createTypeMap = function createTypeMap(match) {\n  return {\n    function: function _function(m, expectation, message) {\n      m.test = expectation;\n      m.message = message || \"match(\".concat(functionName(expectation), \")\");\n    },\n    number: function number(m, expectation) {\n      m.test = function (actual) {\n        // we need type coercion here\n        return expectation == actual; // eslint-disable-line eqeqeq\n      };\n    },\n    object: function object(m, expectation) {\n      var array = [];\n\n      if (typeof expectation.test === \"function\") {\n        m.test = function (actual) {\n          return expectation.test(actual) === true;\n        };\n\n        m.message = \"match(\".concat(functionName(expectation.test), \")\");\n        return m;\n      }\n\n      array = map(Object.keys(expectation), function (key) {\n        return \"\".concat(key, \": \").concat(valueToString(expectation[key]));\n      });\n\n      m.test = function (actual) {\n        return matchObject(actual, expectation, match);\n      };\n\n      m.message = \"match(\".concat(join(array, \", \"), \")\");\n      return m;\n    },\n    regexp: function regexp(m, expectation) {\n      m.test = function (actual) {\n        return typeof actual === \"string\" && expectation.test(actual);\n      };\n    },\n    string: function string(m, expectation) {\n      m.test = function (actual) {\n        return typeof actual === \"string\" && stringIndexOf(actual, expectation) !== -1;\n      };\n\n      m.message = \"match(\\\"\".concat(expectation, \"\\\")\");\n    }\n  };\n};\n\nmodule.exports = createTypeMap;","map":null,"metadata":{},"sourceType":"module"}