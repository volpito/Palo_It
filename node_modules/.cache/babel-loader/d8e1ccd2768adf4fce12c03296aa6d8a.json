{"ast":null,"code":"import _defineProperty from \"/Users/volpito/Desktop/projets/PALO_IT_test/palo_it_mrigot/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/Users/volpito/Desktop/projets/PALO_IT_test/palo_it_mrigot/app/javascript/components/TinyArythmeticExpressionParser/TinyArythmeticExpressionParser.js\",\n    _this = this;\n\nimport React from 'react';\n\nvar split = function split(expression, operator) {\n  var result = [];\n  var braces = 0;\n  var currentChunk = \"\";\n\n  for (var i = 0; i < expression.length; ++i) {\n    var curCh = expression[i];\n\n    if (curCh == '(') {\n      braces++;\n    } else if (curCh == ')') {\n      braces--;\n    }\n\n    if (braces == 0 && operator == curCh) {\n      result.push(currentChunk);\n      currentChunk = \"\";\n    } else currentChunk += curCh;\n  }\n\n  if (currentChunk != \"\") {\n    result.push(currentChunk);\n  }\n\n  return result;\n}; // this will only take strings containing * operator [ no + ]\n\n\nvar parseMultiplicationSeparatedExpression = function parseMultiplicationSeparatedExpression(expression) {\n  var numbersString = split(expression, '*');\n  console.log(numbersString);\n  var numbers = numbersString.map(function (noStr) {\n    if (noStr[0] == '(') {\n      var expr = noStr.substr(1, noStr.length - 2); // recursive call to the main function\n\n      return parsePlusSeparatedExpression(expr);\n    }\n\n    return +noStr;\n  });\n  var initialValue = 1.0;\n  var result = numbers.reduce(function (acc, no) {\n    return acc * no;\n  }, initialValue);\n  return result;\n};\n\nvar parseDivisionSeparatedExpression = function parseDivisionSeparatedExpression(expression) {\n  var numbersString = split(expression, '/');\n  console.log(numbersString);\n  var numbers = numbersString.map(function (noStr) {\n    if (noStr[0] == '(') {\n      var expr = noStr.substr(1, noStr.length - 2); // recursive call to the main function\n\n      return parsePlusSeparatedExpression(expr);\n    }\n\n    return +noStr;\n  });\n  var initialValue = 1.0;\n  var result = numbers.reduce(function (acc, no) {\n    return acc / no;\n  }, initialValue);\n  return result;\n}; // both * / -\n\n\nvar multiplyOrDivide = function multiplyOrDivide(expression) {\n  if (expression.includes('/')) {\n    var numbersString = split(expression, '-');\n    var numbers = numbersString.map(function (noStr) {\n      return parseDivisionSeparatedExpression(noStr);\n    });\n    var initialValue = numbers[0];\n    var result = numbers.slice(1).reduce(function (acc, no) {\n      return acc - no;\n    }, initialValue);\n    return result;\n  } else if (expression.includes('*')) {\n    var _numbersString = split(expression, '-');\n\n    var _numbers = _numbersString.map(function (noStr) {\n      return parseMultiplicationSeparatedExpression(noStr);\n    });\n\n    var _initialValue = _numbers[0];\n\n    var _result = _numbers.slice(1).reduce(function (acc, no) {\n      return acc - no;\n    }, _initialValue);\n\n    return _result;\n  }\n}; // * / - + \n\n\nvar parsePlusSeparatedExpression = function parsePlusSeparatedExpression(expression) {\n  var numbersString = split(expression, '+');\n  var numbers = numbersString.map(function (noStr) {\n    return multiplyOrDivide(noStr);\n  });\n  var initialValue = 0.0;\n  var result = numbers.reduce(function (acc, no) {\n    return acc + no;\n  }, initialValue);\n  return result;\n};\n\nvar Parse = function Parse(_ref) {\n  var _React$createElement, _React$createElement2;\n\n  var expression = _ref.expression;\n  var search = ',';\n  var replaceWith = '.';\n  var res = expression.split(search).join(replaceWith);\n  var result = parsePlusSeparatedExpression(res, '+');\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", (_React$createElement2 = {\n    className: \"flex m-4\",\n    __self: _this\n  }, _defineProperty(_React$createElement2, \"__self\", _this), _defineProperty(_React$createElement2, \"__source\", {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }), _React$createElement2), /*#__PURE__*/React.createElement(\"p\", (_React$createElement = {\n    __self: _this\n  }, _defineProperty(_React$createElement, \"__self\", _this), _defineProperty(_React$createElement, \"__source\", {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 7\n  }), _React$createElement), expression, \" is equal to : \", result)));\n};\n\nexport default Parse;","map":{"version":3,"sources":["/Users/volpito/Desktop/projets/PALO_IT_test/palo_it_mrigot/app/javascript/components/TinyArythmeticExpressionParser/TinyArythmeticExpressionParser.js"],"names":["React","split","expression","operator","result","braces","currentChunk","i","length","curCh","push","parseMultiplicationSeparatedExpression","numbersString","console","log","numbers","map","noStr","expr","substr","parsePlusSeparatedExpression","initialValue","reduce","acc","no","parseDivisionSeparatedExpression","multiplyOrDivide","includes","slice","Parse","search","replaceWith","res","join"],"mappings":"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","sourcesContent":["import React from 'react'\n\nconst split = (expression, operator) => {\n  const result = [];\n  let braces = 0;\n  let currentChunk = \"\";\n  for (let i = 0; i < expression.length; ++i) {\n    const curCh = expression[i];\n    if (curCh == '(') {\n      braces++;\n    } else if (curCh == ')') {\n      braces--;\n    }\n    if (braces == 0 && operator == curCh) {\n      result.push(currentChunk);\n      currentChunk = \"\";\n    } else currentChunk += curCh;\n  }\n  if (currentChunk != \"\") {\n    result.push(currentChunk);\n  }\n  return result;\n};\n\n// this will only take strings containing * operator [ no + ]\nconst parseMultiplicationSeparatedExpression = (expression) => {\n  const numbersString = split(expression, '*');\n  console.log(numbersString)\n  const numbers = numbersString.map(noStr => {\n    if (noStr[0] == '(') {\n      const expr = noStr.substr(1, noStr.length - 2);\n      // recursive call to the main function\n      return parsePlusSeparatedExpression(expr);\n    }\n    return +noStr;\n  });\n  const initialValue = 1.0;\n  const result = numbers.reduce((acc, no) => acc * no, initialValue);\n  return result;\n};\n\nconst parseDivisionSeparatedExpression = (expression) => {\n  const numbersString = split(expression, '/');\n  console.log(numbersString)\n  const numbers = numbersString.map(noStr => {\n    if (noStr[0] == '(') {\n      const expr = noStr.substr(1, noStr.length - 2);\n      // recursive call to the main function\n      return parsePlusSeparatedExpression(expr);\n    }\n    return +noStr;\n  });\n  const initialValue = 1.0;\n  const result = numbers.reduce((acc, no) => acc / no, initialValue);\n  return result;\n};\n\n// both * / -\nconst multiplyOrDivide = (expression) => {\n  if(expression.includes('/')){\n      const numbersString = split(expression, '-');\n      const numbers = numbersString.map(noStr => parseDivisionSeparatedExpression(noStr));\n      const initialValue = numbers[0];\n      const result = numbers.slice(1).reduce((acc, no) => acc - no, initialValue);\n      return result;\n  } else if(expression.includes('*')){\n    const numbersString = split(expression, '-');\n    const numbers = numbersString.map(noStr => parseMultiplicationSeparatedExpression(noStr));\n    const initialValue = numbers[0];\n    const result = numbers.slice(1).reduce((acc, no) => acc - no, initialValue);\n    return result;\n}\n  \n}\n\n// * / - + \nconst parsePlusSeparatedExpression = (expression) => {\n  const numbersString = split(expression, '+');\n  const numbers = numbersString.map(noStr => multiplyOrDivide(noStr));\n  const initialValue = 0.0;\n  const result = numbers.reduce((acc, no) => acc + no, initialValue);\n  return result;\n};\n\nconst Parse = ({expression}) => {\n\n  const search = ',';\n  const replaceWith = '.';\n  const res = expression.split(search).join(replaceWith);\n  const result = parsePlusSeparatedExpression(res, '+');\n\n  return (\n    <>\n    <div className=\"flex m-4\">\n      <p >{expression} is equal to : {result}</p>\n    </div>\n    </>\n  )\n};\n\nexport default Parse;"]},"metadata":{},"sourceType":"module"}