{"ast":null,"code":"\"use strict\";\n/**\n * Returns true when fn returns true for all members of obj.\n * This is an every implementation that works for all iterables\n *\n * @param  {object}   obj\n * @param  {Function} fn\n * @returns {boolean}\n */\n\nmodule.exports = function every(obj, fn) {\n  var pass = true;\n\n  try {\n    // eslint-disable-next-line @sinonjs/no-prototype-methods/no-prototype-methods\n    obj.forEach(function () {\n      if (!fn.apply(this, arguments)) {\n        // Throwing an error is the only way to break `forEach`\n        throw new Error();\n      }\n    });\n  } catch (e) {\n    pass = false;\n  }\n\n  return pass;\n};","map":null,"metadata":{},"sourceType":"module"}