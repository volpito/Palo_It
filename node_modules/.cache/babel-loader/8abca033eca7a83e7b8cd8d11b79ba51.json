{"ast":null,"code":"\"use strict\";\n\nvar arrayProto = require(\"@sinonjs/commons\").prototypes.array;\n\nvar hasOwnProperty = require(\"@sinonjs/commons\").prototypes.object.hasOwnProperty;\n\nvar join = arrayProto.join;\nvar push = arrayProto.push; // Adapted from https://developer.mozilla.org/en/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug\n\nvar hasDontEnumBug = function () {\n  var obj = {\n    constructor: function constructor() {\n      return \"0\";\n    },\n    toString: function toString() {\n      return \"1\";\n    },\n    valueOf: function valueOf() {\n      return \"2\";\n    },\n    toLocaleString: function toLocaleString() {\n      return \"3\";\n    },\n    prototype: function prototype() {\n      return \"4\";\n    },\n    isPrototypeOf: function isPrototypeOf() {\n      return \"5\";\n    },\n    propertyIsEnumerable: function propertyIsEnumerable() {\n      return \"6\";\n    },\n    hasOwnProperty: function hasOwnProperty() {\n      return \"7\";\n    },\n    length: function length() {\n      return \"8\";\n    },\n    unique: function unique() {\n      return \"9\";\n    }\n  };\n  var result = [];\n\n  for (var prop in obj) {\n    if (hasOwnProperty(obj, prop)) {\n      push(result, obj[prop]());\n    }\n  }\n\n  return join(result, \"\") !== \"0123456789\";\n}();\n\nfunction extendCommon(target, sources, doCopy) {\n  var source, i, prop;\n\n  for (i = 0; i < sources.length; i++) {\n    source = sources[i];\n\n    for (prop in source) {\n      if (hasOwnProperty(source, prop)) {\n        doCopy(target, source, prop);\n      }\n    } // Make sure we copy (own) toString method even when in JScript with DontEnum bug\n    // See https://developer.mozilla.org/en/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug\n\n\n    if (hasDontEnumBug && hasOwnProperty(source, \"toString\") && source.toString !== target.toString) {\n      target.toString = source.toString;\n    }\n  }\n\n  return target;\n}\n/** Public: Extend target in place with all (own) properties, except 'name' when [[writable]] is false,\n *         from sources in-order. Thus, last source will override properties in previous sources.\n *\n * @param {object} target - The Object to extend\n * @param {object[]} sources - Objects to copy properties from.\n *\n * @returns {object} the extended target\n */\n\n\nmodule.exports = function extend(target) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  return extendCommon(target, sources, function copyValue(dest, source, prop) {\n    var destOwnPropertyDescriptor = Object.getOwnPropertyDescriptor(dest, prop);\n    var sourceOwnPropertyDescriptor = Object.getOwnPropertyDescriptor(source, prop);\n\n    if (prop === \"name\" && !destOwnPropertyDescriptor.writable) {\n      return;\n    }\n\n    var descriptors = {\n      configurable: sourceOwnPropertyDescriptor.configurable,\n      enumerable: sourceOwnPropertyDescriptor.enumerable\n    };\n    /*\n        if the sorce has an Accessor property copy over the accessor functions (get and set)\n        data properties has writable attribute where as acessor property don't\n        REF: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#properties\n    */\n\n    if (hasOwnProperty(sourceOwnPropertyDescriptor, \"writable\")) {\n      descriptors.writable = sourceOwnPropertyDescriptor.writable;\n      descriptors.value = sourceOwnPropertyDescriptor.value;\n    } else {\n      if (sourceOwnPropertyDescriptor.get) {\n        descriptors.get = sourceOwnPropertyDescriptor.get.bind(dest);\n      }\n\n      if (sourceOwnPropertyDescriptor.set) {\n        descriptors.set = sourceOwnPropertyDescriptor.set.bind(dest);\n      }\n    }\n\n    Object.defineProperty(dest, prop, descriptors);\n  });\n};\n/** Public: Extend target in place with all (own) properties from sources in-order. Thus, last source will\n *         override properties in previous sources. Define the properties as non enumerable.\n *\n * @param {object} target - The Object to extend\n * @param {object[]} sources - Objects to copy properties from.\n *\n * @returns {object} the extended target\n */\n\n\nmodule.exports.nonEnum = function extendNonEnum(target) {\n  for (var _len2 = arguments.length, sources = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    sources[_key2 - 1] = arguments[_key2];\n  }\n\n  return extendCommon(target, sources, function copyProperty(dest, source, prop) {\n    Object.defineProperty(dest, prop, {\n      value: source[prop],\n      enumerable: false,\n      configurable: true,\n      writable: true\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}