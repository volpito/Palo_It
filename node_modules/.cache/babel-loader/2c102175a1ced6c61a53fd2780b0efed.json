{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar defaultTreeAdapter = require('../tree-adapters/default');\n\nvar mergeOptions = require('../utils/merge-options');\n\nvar doctype = require('../common/doctype');\n\nvar HTML = require('../common/html'); //Aliases\n\n\nvar $ = HTML.TAG_NAMES;\nvar NS = HTML.NAMESPACES; //Default serializer options\n\nvar DEFAULT_OPTIONS = {\n  treeAdapter: defaultTreeAdapter\n}; //Escaping regexes\n\nvar AMP_REGEX = /&/g;\nvar NBSP_REGEX = /\\u00a0/g;\nvar DOUBLE_QUOTE_REGEX = /\"/g;\nvar LT_REGEX = /</g;\nvar GT_REGEX = />/g; //Serializer\n\nvar Serializer = /*#__PURE__*/function () {\n  function Serializer(node, options) {\n    _classCallCheck(this, Serializer);\n\n    this.options = mergeOptions(DEFAULT_OPTIONS, options);\n    this.treeAdapter = this.options.treeAdapter;\n    this.html = '';\n    this.startNode = node;\n  } //API\n\n\n  _createClass(Serializer, [{\n    key: \"serialize\",\n    value: function serialize() {\n      this._serializeChildNodes(this.startNode);\n\n      return this.html;\n    } //Internals\n\n  }, {\n    key: \"_serializeChildNodes\",\n    value: function _serializeChildNodes(parentNode) {\n      var childNodes = this.treeAdapter.getChildNodes(parentNode);\n\n      if (childNodes) {\n        for (var i = 0, cnLength = childNodes.length; i < cnLength; i++) {\n          var currentNode = childNodes[i];\n\n          if (this.treeAdapter.isElementNode(currentNode)) {\n            this._serializeElement(currentNode);\n          } else if (this.treeAdapter.isTextNode(currentNode)) {\n            this._serializeTextNode(currentNode);\n          } else if (this.treeAdapter.isCommentNode(currentNode)) {\n            this._serializeCommentNode(currentNode);\n          } else if (this.treeAdapter.isDocumentTypeNode(currentNode)) {\n            this._serializeDocumentTypeNode(currentNode);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_serializeElement\",\n    value: function _serializeElement(node) {\n      var tn = this.treeAdapter.getTagName(node);\n      var ns = this.treeAdapter.getNamespaceURI(node);\n      this.html += '<' + tn;\n\n      this._serializeAttributes(node);\n\n      this.html += '>';\n\n      if (tn !== $.AREA && tn !== $.BASE && tn !== $.BASEFONT && tn !== $.BGSOUND && tn !== $.BR && tn !== $.COL && tn !== $.EMBED && tn !== $.FRAME && tn !== $.HR && tn !== $.IMG && tn !== $.INPUT && tn !== $.KEYGEN && tn !== $.LINK && tn !== $.META && tn !== $.PARAM && tn !== $.SOURCE && tn !== $.TRACK && tn !== $.WBR) {\n        var childNodesHolder = tn === $.TEMPLATE && ns === NS.HTML ? this.treeAdapter.getTemplateContent(node) : node;\n\n        this._serializeChildNodes(childNodesHolder);\n\n        this.html += '</' + tn + '>';\n      }\n    }\n  }, {\n    key: \"_serializeAttributes\",\n    value: function _serializeAttributes(node) {\n      var attrs = this.treeAdapter.getAttrList(node);\n\n      for (var i = 0, attrsLength = attrs.length; i < attrsLength; i++) {\n        var attr = attrs[i];\n        var value = Serializer.escapeString(attr.value, true);\n        this.html += ' ';\n\n        if (!attr.namespace) {\n          this.html += attr.name;\n        } else if (attr.namespace === NS.XML) {\n          this.html += 'xml:' + attr.name;\n        } else if (attr.namespace === NS.XMLNS) {\n          if (attr.name !== 'xmlns') {\n            this.html += 'xmlns:';\n          }\n\n          this.html += attr.name;\n        } else if (attr.namespace === NS.XLINK) {\n          this.html += 'xlink:' + attr.name;\n        } else {\n          this.html += attr.prefix + ':' + attr.name;\n        }\n\n        this.html += '=\"' + value + '\"';\n      }\n    }\n  }, {\n    key: \"_serializeTextNode\",\n    value: function _serializeTextNode(node) {\n      var content = this.treeAdapter.getTextNodeContent(node);\n      var parent = this.treeAdapter.getParentNode(node);\n      var parentTn = void 0;\n\n      if (parent && this.treeAdapter.isElementNode(parent)) {\n        parentTn = this.treeAdapter.getTagName(parent);\n      }\n\n      if (parentTn === $.STYLE || parentTn === $.SCRIPT || parentTn === $.XMP || parentTn === $.IFRAME || parentTn === $.NOEMBED || parentTn === $.NOFRAMES || parentTn === $.PLAINTEXT || parentTn === $.NOSCRIPT) {\n        this.html += content;\n      } else {\n        this.html += Serializer.escapeString(content, false);\n      }\n    }\n  }, {\n    key: \"_serializeCommentNode\",\n    value: function _serializeCommentNode(node) {\n      this.html += '<!--' + this.treeAdapter.getCommentNodeContent(node) + '-->';\n    }\n  }, {\n    key: \"_serializeDocumentTypeNode\",\n    value: function _serializeDocumentTypeNode(node) {\n      var name = this.treeAdapter.getDocumentTypeNodeName(node);\n      this.html += '<' + doctype.serializeContent(name, null, null) + '>';\n    }\n  }]);\n\n  return Serializer;\n}(); // NOTE: used in tests and by rewriting stream\n\n\nSerializer.escapeString = function (str, attrMode) {\n  str = str.replace(AMP_REGEX, '&amp;').replace(NBSP_REGEX, '&nbsp;');\n\n  if (attrMode) {\n    str = str.replace(DOUBLE_QUOTE_REGEX, '&quot;');\n  } else {\n    str = str.replace(LT_REGEX, '&lt;').replace(GT_REGEX, '&gt;');\n  }\n\n  return str;\n};\n\nmodule.exports = Serializer;","map":null,"metadata":{},"sourceType":"module"}