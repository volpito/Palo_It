{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }\n\nfunction _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === \"return\" ? \"return\" : \"next\", arg); return; } settle(result.done ? \"return\" : \"normal\", arg); }, function (err) { resume(\"throw\", err); }); } catch (err) { settle(\"throw\", err); } } function settle(type, value) { switch (type) { case \"return\": front.resolve({ value: value, done: true }); break; case \"throw\": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== \"function\") { this.return = undefined; } }\n\n_AsyncGenerator.prototype[typeof Symbol === \"function\" && Symbol.asyncIterator || \"@@asyncIterator\"] = function () { return this; };\n\n_AsyncGenerator.prototype.next = function (arg) { return this._invoke(\"next\", arg); };\n\n_AsyncGenerator.prototype.throw = function (arg) { return this._invoke(\"throw\", arg); };\n\n_AsyncGenerator.prototype.return = function (arg) { return this._invoke(\"return\", arg); };\n\nfunction _awaitAsyncGenerator(value) { return new _AwaitValue(value); }\n\nfunction _AwaitValue(value) { this.wrapped = value; }\n\nfunction _asyncIterator(iterable) { var method; if (typeof Symbol !== \"undefined\") { if (Symbol.asyncIterator) method = iterable[Symbol.asyncIterator]; if (method == null && Symbol.iterator) method = iterable[Symbol.iterator]; } if (method == null) method = iterable[\"@@asyncIterator\"]; if (method == null) method = iterable[\"@@iterator\"]; if (method == null) throw new TypeError(\"Object is not async iterable\"); return method.call(iterable); }\n\nfunction _asyncGeneratorDelegate(inner, awaitWrap) { var iter = {}, waiting = false; function pump(key, value) { waiting = true; value = new Promise(function (resolve) { resolve(inner[key](value)); }); return { done: false, value: awaitWrap(value) }; } ; iter[typeof Symbol !== \"undefined\" && Symbol.iterator || \"@@iterator\"] = function () { return this; }; iter.next = function (value) { if (waiting) { waiting = false; return value; } return pump(\"next\", value); }; if (typeof inner.throw === \"function\") { iter.throw = function (value) { if (waiting) { waiting = false; throw value; } return pump(\"throw\", value); }; } if (typeof inner.return === \"function\") { iter.return = function (value) { if (waiting) { waiting = false; return value; } return pump(\"return\", value); }; } return iter; }\n\nimport { randomBytes } from 'crypto';\nimport { isBlob } from './is.js';\nvar carriage = '\\r\\n';\nvar dashes = '-'.repeat(2);\nvar carriageLength = Buffer.byteLength(carriage);\n/**\n * @param {string} boundary\n */\n\nvar getFooter = function getFooter(boundary) {\n  return \"\".concat(dashes).concat(boundary).concat(dashes).concat(carriage.repeat(2));\n};\n/**\n * @param {string} boundary\n * @param {string} name\n * @param {*} field\n *\n * @return {string}\n */\n\n\nfunction getHeader(boundary, name, field) {\n  var header = '';\n  header += \"\".concat(dashes).concat(boundary).concat(carriage);\n  header += \"Content-Disposition: form-data; name=\\\"\".concat(name, \"\\\"\");\n\n  if (isBlob(field)) {\n    header += \"; filename=\\\"\".concat(field.name, \"\\\"\").concat(carriage);\n    header += \"Content-Type: \".concat(field.type || 'application/octet-stream');\n  }\n\n  return \"\".concat(header).concat(carriage.repeat(2));\n}\n/**\n * @return {string}\n */\n\n\nexport var getBoundary = function getBoundary() {\n  return randomBytes(8).toString('hex');\n};\n/**\n * @param {FormData} form\n * @param {string} boundary\n */\n\nexport function formDataIterator(_x, _x2) {\n  return _formDataIterator.apply(this, arguments);\n}\n/**\n * @param {FormData} form\n * @param {string} boundary\n */\n\nfunction _formDataIterator() {\n  _formDataIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(form, boundary) {\n    var _iterator, _step, _ref3, _ref2, name, value;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _iterator = _createForOfIteratorHelper(form);\n            _context.prev = 1;\n\n            _iterator.s();\n\n          case 3:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 20;\n              break;\n            }\n\n            _ref3 = _step.value;\n            _ref2 = _slicedToArray(_ref3, 2);\n            name = _ref2[0];\n            value = _ref2[1];\n            _context.next = 10;\n            return getHeader(boundary, name, value);\n\n          case 10:\n            if (!isBlob(value)) {\n              _context.next = 14;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(value.stream()), _awaitAsyncGenerator), \"t0\", 12);\n\n          case 12:\n            _context.next = 16;\n            break;\n\n          case 14:\n            _context.next = 16;\n            return value;\n\n          case 16:\n            _context.next = 18;\n            return carriage;\n\n          case 18:\n            _context.next = 3;\n            break;\n\n          case 20:\n            _context.next = 25;\n            break;\n\n          case 22:\n            _context.prev = 22;\n            _context.t1 = _context[\"catch\"](1);\n\n            _iterator.e(_context.t1);\n\n          case 25:\n            _context.prev = 25;\n\n            _iterator.f();\n\n            return _context.finish(25);\n\n          case 28:\n            _context.next = 30;\n            return getFooter(boundary);\n\n          case 30:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 22, 25, 28]]);\n  }));\n  return _formDataIterator.apply(this, arguments);\n}\n\nexport function getFormDataLength(form, boundary) {\n  var length = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(form),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _ref6 = _step2.value;\n\n      var _ref5 = _slicedToArray(_ref6, 2);\n\n      var name = _ref5[0];\n      var value = _ref5[1];\n      length += Buffer.byteLength(getHeader(boundary, name, value));\n      length += isBlob(value) ? value.size : Buffer.byteLength(String(value));\n      length += carriageLength;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  length += Buffer.byteLength(getFooter(boundary));\n  return length;\n}","map":null,"metadata":{},"sourceType":"module"}