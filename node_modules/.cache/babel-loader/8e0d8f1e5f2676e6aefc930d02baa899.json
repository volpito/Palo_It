{"ast":null,"code":"\"use strict\";\n\nvar functionName = require(\"@sinonjs/commons\").functionName;\n\nvar getPropertyDescriptor = require(\"./get-property-descriptor\");\n\nvar walk = require(\"./walk\");\n\nfunction walkObject(predicate, object, filter) {\n  var called = false;\n  var name = functionName(predicate);\n\n  if (!object) {\n    throw new Error(\"Trying to \".concat(name, \" object but received \").concat(String(object)));\n  }\n\n  walk(object, function (prop, propOwner) {\n    // we don't want to stub things like toString(), valueOf(), etc. so we only stub if the object\n    // is not Object.prototype\n    if (propOwner !== Object.prototype && prop !== \"constructor\" && typeof getPropertyDescriptor(propOwner, prop).value === \"function\") {\n      if (filter) {\n        if (filter(object, prop)) {\n          called = true;\n          predicate(object, prop);\n        }\n      } else {\n        called = true;\n        predicate(object, prop);\n      }\n    }\n  });\n\n  if (!called) {\n    throw new Error(\"Expected to \".concat(name, \" methods on object but found none\"));\n  }\n\n  return object;\n}\n\nmodule.exports = walkObject;","map":null,"metadata":{},"sourceType":"module"}