{"ast":null,"code":"/* eslint-disable no-console */\n\"use strict\";\n/**\n * Returns a function that will invoke the supplied function and print a\n * deprecation warning to the console each time it is called.\n *\n * @param  {Function} func\n * @param  {string} msg\n * @returns {Function}\n */\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nexports.wrap = function (func, msg) {\n  var wrapped = function wrapped() {\n    exports.printWarning(msg);\n    return func.apply(this, arguments);\n  };\n\n  if (func.prototype) {\n    wrapped.prototype = func.prototype;\n  }\n\n  return wrapped;\n};\n/**\n * Returns a string which can be supplied to `wrap()` to notify the user that a\n * particular part of the sinon API has been deprecated.\n *\n * @param  {string} packageName\n * @param  {string} funcName\n * @returns {string}\n */\n\n\nexports.defaultMsg = function (packageName, funcName) {\n  return packageName + \".\" + funcName + \" is deprecated and will be removed from the public API in a future version of \" + packageName + \".\";\n};\n/**\n * Prints a warning on the console, when it exists\n *\n * @param  {string} msg\n * @returns {undefined}\n */\n\n\nexports.printWarning = function (msg) {\n  /* istanbul ignore next */\n  if ((typeof process === \"undefined\" ? \"undefined\" : _typeof(process)) === \"object\" && process.emitWarning) {\n    // Emit Warnings in Node\n    process.emitWarning(msg);\n  } else if (console.info) {\n    console.info(msg);\n  } else {\n    console.log(msg);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}