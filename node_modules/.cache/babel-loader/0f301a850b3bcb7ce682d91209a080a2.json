{"ast":null,"code":"\"use strict\";\n\nvar sort = require(\"./prototypes/array\").sort;\n\nvar slice = require(\"./prototypes/array\").slice;\n/**\n * @private\n */\n\n\nfunction comparator(a, b) {\n  // uuid, won't ever be equal\n  var aCall = a.getCall(0);\n  var bCall = b.getCall(0);\n  var aId = aCall && aCall.callId || -1;\n  var bId = bCall && bCall.callId || -1;\n  return aId < bId ? -1 : 1;\n}\n/**\n * A Sinon proxy object (fake, spy, stub)\n *\n * @typedef {object} SinonProxy\n * @property {Function} getCall - A method that can return the first call\n */\n\n/**\n * Sorts an array of SinonProxy instances (fake, spy, stub) by their first call\n *\n * @param  {SinonProxy[] | SinonProxy} spies\n * @returns {SinonProxy[]}\n */\n\n\nfunction orderByFirstCall(spies) {\n  return sort(slice(spies), comparator);\n}\n\nmodule.exports = orderByFirstCall;","map":null,"metadata":{},"sourceType":"module"}