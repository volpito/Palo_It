{"ast":null,"code":"\"use strict\";\n\nvar arrayProto = require(\"@sinonjs/commons\").prototypes.array;\n\nvar isPropertyConfigurable = require(\"./util/core/is-property-configurable\");\n\nvar exportAsyncBehaviors = require(\"./util/core/export-async-behaviors\");\n\nvar extend = require(\"./util/core/extend\");\n\nvar slice = arrayProto.slice;\nvar useLeftMostCallback = -1;\nvar useRightMostCallback = -2;\n\nfunction throwsException(fake, error, message) {\n  if (typeof error === \"function\") {\n    fake.exceptionCreator = error;\n  } else if (typeof error === \"string\") {\n    fake.exceptionCreator = function () {\n      var newException = new Error(message || \"\");\n      newException.name = error;\n      return newException;\n    };\n  } else if (!error) {\n    fake.exceptionCreator = function () {\n      return new Error(\"Error\");\n    };\n  } else {\n    fake.exception = error;\n  }\n}\n\nvar defaultBehaviors = {\n  callsFake: function callsFake(fake, fn) {\n    fake.fakeFn = fn;\n  },\n  callsArg: function callsArg(fake, index) {\n    if (typeof index !== \"number\") {\n      throw new TypeError(\"argument index is not number\");\n    }\n\n    fake.callArgAt = index;\n    fake.callbackArguments = [];\n    fake.callbackContext = undefined;\n    fake.callArgProp = undefined;\n    fake.callbackAsync = false;\n  },\n  callsArgOn: function callsArgOn(fake, index, context) {\n    if (typeof index !== \"number\") {\n      throw new TypeError(\"argument index is not number\");\n    }\n\n    fake.callArgAt = index;\n    fake.callbackArguments = [];\n    fake.callbackContext = context;\n    fake.callArgProp = undefined;\n    fake.callbackAsync = false;\n  },\n  callsArgWith: function callsArgWith(fake, index) {\n    if (typeof index !== \"number\") {\n      throw new TypeError(\"argument index is not number\");\n    }\n\n    fake.callArgAt = index;\n    fake.callbackArguments = slice(arguments, 2);\n    fake.callbackContext = undefined;\n    fake.callArgProp = undefined;\n    fake.callbackAsync = false;\n  },\n  callsArgOnWith: function callsArgWith(fake, index, context) {\n    if (typeof index !== \"number\") {\n      throw new TypeError(\"argument index is not number\");\n    }\n\n    fake.callArgAt = index;\n    fake.callbackArguments = slice(arguments, 3);\n    fake.callbackContext = context;\n    fake.callArgProp = undefined;\n    fake.callbackAsync = false;\n  },\n  usingPromise: function usingPromise(fake, promiseLibrary) {\n    fake.promiseLibrary = promiseLibrary;\n  },\n  yields: function yields(fake) {\n    fake.callArgAt = useLeftMostCallback;\n    fake.callbackArguments = slice(arguments, 1);\n    fake.callbackContext = undefined;\n    fake.callArgProp = undefined;\n    fake.callbackAsync = false;\n    fake.fakeFn = undefined;\n  },\n  yieldsRight: function yieldsRight(fake) {\n    fake.callArgAt = useRightMostCallback;\n    fake.callbackArguments = slice(arguments, 1);\n    fake.callbackContext = undefined;\n    fake.callArgProp = undefined;\n    fake.callbackAsync = false;\n    fake.fakeFn = undefined;\n  },\n  yieldsOn: function yieldsOn(fake, context) {\n    fake.callArgAt = useLeftMostCallback;\n    fake.callbackArguments = slice(arguments, 2);\n    fake.callbackContext = context;\n    fake.callArgProp = undefined;\n    fake.callbackAsync = false;\n    fake.fakeFn = undefined;\n  },\n  yieldsTo: function yieldsTo(fake, prop) {\n    fake.callArgAt = useLeftMostCallback;\n    fake.callbackArguments = slice(arguments, 2);\n    fake.callbackContext = undefined;\n    fake.callArgProp = prop;\n    fake.callbackAsync = false;\n    fake.fakeFn = undefined;\n  },\n  yieldsToOn: function yieldsToOn(fake, prop, context) {\n    fake.callArgAt = useLeftMostCallback;\n    fake.callbackArguments = slice(arguments, 3);\n    fake.callbackContext = context;\n    fake.callArgProp = prop;\n    fake.callbackAsync = false;\n    fake.fakeFn = undefined;\n  },\n  throws: throwsException,\n  throwsException: throwsException,\n  returns: function returns(fake, value) {\n    fake.returnValue = value;\n    fake.resolve = false;\n    fake.reject = false;\n    fake.returnValueDefined = true;\n    fake.exception = undefined;\n    fake.exceptionCreator = undefined;\n    fake.fakeFn = undefined;\n  },\n  returnsArg: function returnsArg(fake, index) {\n    if (typeof index !== \"number\") {\n      throw new TypeError(\"argument index is not number\");\n    }\n\n    fake.returnArgAt = index;\n  },\n  throwsArg: function throwsArg(fake, index) {\n    if (typeof index !== \"number\") {\n      throw new TypeError(\"argument index is not number\");\n    }\n\n    fake.throwArgAt = index;\n  },\n  returnsThis: function returnsThis(fake) {\n    fake.returnThis = true;\n  },\n  resolves: function resolves(fake, value) {\n    fake.returnValue = value;\n    fake.resolve = true;\n    fake.resolveThis = false;\n    fake.reject = false;\n    fake.returnValueDefined = true;\n    fake.exception = undefined;\n    fake.exceptionCreator = undefined;\n    fake.fakeFn = undefined;\n  },\n  resolvesArg: function resolvesArg(fake, index) {\n    if (typeof index !== \"number\") {\n      throw new TypeError(\"argument index is not number\");\n    }\n\n    fake.resolveArgAt = index;\n    fake.returnValue = undefined;\n    fake.resolve = true;\n    fake.resolveThis = false;\n    fake.reject = false;\n    fake.returnValueDefined = false;\n    fake.exception = undefined;\n    fake.exceptionCreator = undefined;\n    fake.fakeFn = undefined;\n  },\n  rejects: function rejects(fake, error, message) {\n    var reason;\n\n    if (typeof error === \"string\") {\n      reason = new Error(message || \"\");\n      reason.name = error;\n    } else if (!error) {\n      reason = new Error(\"Error\");\n    } else {\n      reason = error;\n    }\n\n    fake.returnValue = reason;\n    fake.resolve = false;\n    fake.resolveThis = false;\n    fake.reject = true;\n    fake.returnValueDefined = true;\n    fake.exception = undefined;\n    fake.exceptionCreator = undefined;\n    fake.fakeFn = undefined;\n    return fake;\n  },\n  resolvesThis: function resolvesThis(fake) {\n    fake.returnValue = undefined;\n    fake.resolve = false;\n    fake.resolveThis = true;\n    fake.reject = false;\n    fake.returnValueDefined = false;\n    fake.exception = undefined;\n    fake.exceptionCreator = undefined;\n    fake.fakeFn = undefined;\n  },\n  callThrough: function callThrough(fake) {\n    fake.callsThrough = true;\n  },\n  callThroughWithNew: function callThroughWithNew(fake) {\n    fake.callsThroughWithNew = true;\n  },\n  get: function get(fake, getterFunction) {\n    var rootStub = fake.stub || fake;\n    Object.defineProperty(rootStub.rootObj, rootStub.propName, {\n      get: getterFunction,\n      configurable: isPropertyConfigurable(rootStub.rootObj, rootStub.propName)\n    });\n    return fake;\n  },\n  set: function set(fake, setterFunction) {\n    var rootStub = fake.stub || fake;\n    Object.defineProperty(rootStub.rootObj, rootStub.propName, // eslint-disable-next-line accessor-pairs\n    {\n      set: setterFunction,\n      configurable: isPropertyConfigurable(rootStub.rootObj, rootStub.propName)\n    });\n    return fake;\n  },\n  value: function value(fake, newVal) {\n    var rootStub = fake.stub || fake;\n    Object.defineProperty(rootStub.rootObj, rootStub.propName, {\n      value: newVal,\n      enumerable: true,\n      configurable: rootStub.shadowsPropOnPrototype || isPropertyConfigurable(rootStub.rootObj, rootStub.propName)\n    });\n    return fake;\n  }\n};\nvar asyncBehaviors = exportAsyncBehaviors(defaultBehaviors);\nmodule.exports = extend({}, defaultBehaviors, asyncBehaviors);","map":null,"metadata":{},"sourceType":"module"}