{"ast":null,"code":"\"use strict\";\n\nvar push = require(\"@sinonjs/commons\").prototypes.array.push;\n\nexports.incrementCallCount = function incrementCallCount(proxy) {\n  proxy.called = true;\n  proxy.callCount += 1;\n  proxy.notCalled = false;\n  proxy.calledOnce = proxy.callCount === 1;\n  proxy.calledTwice = proxy.callCount === 2;\n  proxy.calledThrice = proxy.callCount === 3;\n};\n\nexports.createCallProperties = function createCallProperties(proxy) {\n  proxy.firstCall = proxy.getCall(0);\n  proxy.secondCall = proxy.getCall(1);\n  proxy.thirdCall = proxy.getCall(2);\n  proxy.lastCall = proxy.getCall(proxy.callCount - 1);\n};\n\nexports.delegateToCalls = function delegateToCalls(proxy, method, matchAny, actual, returnsValues, notCalled, totalCallCount) {\n  proxy[method] = function () {\n    if (!this.called) {\n      if (notCalled) {\n        return notCalled.apply(this, arguments);\n      }\n\n      return false;\n    }\n\n    if (totalCallCount !== undefined && this.callCount !== totalCallCount) {\n      return false;\n    }\n\n    var currentCall;\n    var matches = 0;\n    var returnValues = [];\n\n    for (var i = 0, l = this.callCount; i < l; i += 1) {\n      currentCall = this.getCall(i);\n      var returnValue = currentCall[actual || method].apply(currentCall, arguments);\n      push(returnValues, returnValue);\n\n      if (returnValue) {\n        matches += 1;\n\n        if (matchAny) {\n          return true;\n        }\n      }\n    }\n\n    if (returnsValues) {\n      return returnValues;\n    }\n\n    return matches === this.callCount;\n  };\n};","map":null,"metadata":{},"sourceType":"module"}