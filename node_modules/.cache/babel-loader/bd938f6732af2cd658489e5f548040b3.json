{"ast":null,"code":"\"use strict\";\n\nvar every = require(\"@sinonjs/commons\").prototypes.array.every;\n\nvar concat = require(\"@sinonjs/commons\").prototypes.array.concat;\n\nvar typeOf = require(\"@sinonjs/commons\").typeOf;\n\nvar deepEqualFactory = require(\"../deep-equal\").use;\n\nvar isMatcher = require(\"./is-matcher\");\n\nvar keys = Object.keys;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\n/**\n * Matches `actual` with `expectation`\n *\n * @private\n * @param {*} actual A value to examine\n * @param {object} expectation An object with properties to match on\n * @param {object} matcher A matcher to use for comparison\n * @returns {boolean} Returns true when `actual` matches all properties in `expectation`\n */\n\nfunction matchObject(actual, expectation, matcher) {\n  var deepEqual = deepEqualFactory(matcher);\n\n  if (actual === null || actual === undefined) {\n    return false;\n  }\n\n  var expectedKeys = keys(expectation);\n  /* istanbul ignore else: cannot collect coverage for engine that doesn't support Symbol */\n\n  if (typeOf(getOwnPropertySymbols) === \"function\") {\n    expectedKeys = concat(expectedKeys, getOwnPropertySymbols(expectation));\n  }\n\n  return every(expectedKeys, function (key) {\n    var exp = expectation[key];\n    var act = actual[key];\n\n    if (isMatcher(exp)) {\n      if (!exp.test(act)) {\n        return false;\n      }\n    } else if (typeOf(exp) === \"object\") {\n      if (!matchObject(act, exp, matcher)) {\n        return false;\n      }\n    } else if (!deepEqual(act, exp)) {\n      return false;\n    }\n\n    return true;\n  });\n}\n\nmodule.exports = matchObject;","map":null,"metadata":{},"sourceType":"module"}