{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _awaitAsyncGenerator(value) { return new _AwaitValue(value); }\n\nfunction _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }\n\nfunction _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === \"return\" ? \"return\" : \"next\", arg); return; } settle(result.done ? \"return\" : \"normal\", arg); }, function (err) { resume(\"throw\", err); }); } catch (err) { settle(\"throw\", err); } } function settle(type, value) { switch (type) { case \"return\": front.resolve({ value: value, done: true }); break; case \"throw\": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== \"function\") { this.return = undefined; } }\n\n_AsyncGenerator.prototype[typeof Symbol === \"function\" && Symbol.asyncIterator || \"@@asyncIterator\"] = function () { return this; };\n\n_AsyncGenerator.prototype.next = function (arg) { return this._invoke(\"next\", arg); };\n\n_AsyncGenerator.prototype.throw = function (arg) { return this._invoke(\"throw\", arg); };\n\n_AsyncGenerator.prototype.return = function (arg) { return this._invoke(\"return\", arg); };\n\nfunction _AwaitValue(value) { this.wrapped = value; }\n\n/**\n * web-streams-polyfill v3.1.1\n */\n(function (global, factory) {\n  (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.WebStreamsPolyfill = {}));\n})(this, function (exports) {\n  'use strict'; /// <reference lib=\"es2015.symbol\" />\n\n  var SymbolPolyfill = typeof Symbol === 'function' && _typeof(Symbol.iterator) === 'symbol' ? Symbol : function (description) {\n    return \"Symbol(\".concat(description, \")\");\n  }; /// <reference lib=\"dom\" />\n\n  function noop() {\n    return undefined;\n  }\n\n  function getGlobals() {\n    if (typeof self !== 'undefined') {\n      return self;\n    } else if (typeof window !== 'undefined') {\n      return window;\n    } else if (typeof global !== 'undefined') {\n      return global;\n    }\n\n    return undefined;\n  }\n\n  var globals = getGlobals();\n\n  function typeIsObject(x) {\n    return _typeof(x) === 'object' && x !== null || typeof x === 'function';\n  }\n\n  var rethrowAssertionErrorRejection = noop;\n  var originalPromise = Promise;\n  var originalPromiseThen = Promise.prototype.then;\n  var originalPromiseResolve = Promise.resolve.bind(originalPromise);\n  var originalPromiseReject = Promise.reject.bind(originalPromise);\n\n  function newPromise(executor) {\n    return new originalPromise(executor);\n  }\n\n  function promiseResolvedWith(value) {\n    return originalPromiseResolve(value);\n  }\n\n  function promiseRejectedWith(reason) {\n    return originalPromiseReject(reason);\n  }\n\n  function PerformPromiseThen(promise, onFulfilled, onRejected) {\n    // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an\n    // approximation.\n    return originalPromiseThen.call(promise, onFulfilled, onRejected);\n  }\n\n  function uponPromise(promise, onFulfilled, onRejected) {\n    PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);\n  }\n\n  function uponFulfillment(promise, onFulfilled) {\n    uponPromise(promise, onFulfilled);\n  }\n\n  function uponRejection(promise, onRejected) {\n    uponPromise(promise, undefined, onRejected);\n  }\n\n  function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {\n    return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);\n  }\n\n  function setPromiseIsHandledToTrue(promise) {\n    PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);\n  }\n\n  var queueMicrotask = function () {\n    var globalQueueMicrotask = globals && globals.queueMicrotask;\n\n    if (typeof globalQueueMicrotask === 'function') {\n      return globalQueueMicrotask;\n    }\n\n    var resolvedPromise = promiseResolvedWith(undefined);\n    return function (fn) {\n      return PerformPromiseThen(resolvedPromise, fn);\n    };\n  }();\n\n  function reflectCall(F, V, args) {\n    if (typeof F !== 'function') {\n      throw new TypeError('Argument is not a function');\n    }\n\n    return Function.prototype.apply.call(F, V, args);\n  }\n\n  function promiseCall(F, V, args) {\n    try {\n      return promiseResolvedWith(reflectCall(F, V, args));\n    } catch (value) {\n      return promiseRejectedWith(value);\n    }\n  } // Original from Chromium\n  // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js\n\n\n  var QUEUE_MAX_ARRAY_SIZE = 16384;\n  /**\n   * Simple queue structure.\n   *\n   * Avoids scalability issues with using a packed array directly by using\n   * multiple arrays in a linked list and keeping the array size bounded.\n   */\n\n  var SimpleQueue = /*#__PURE__*/function () {\n    function SimpleQueue() {\n      _classCallCheck(this, SimpleQueue);\n\n      this._cursor = 0;\n      this._size = 0; // _front and _back are always defined.\n\n      this._front = {\n        _elements: [],\n        _next: undefined\n      };\n      this._back = this._front; // The cursor is used to avoid calling Array.shift().\n      // It contains the index of the front element of the array inside the\n      // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).\n\n      this._cursor = 0; // When there is only one node, size === elements.length - cursor.\n\n      this._size = 0;\n    }\n\n    _createClass(SimpleQueue, [{\n      key: \"length\",\n      get: function get() {\n        return this._size;\n      } // For exception safety, this method is structured in order:\n      // 1. Read state\n      // 2. Calculate required state mutations\n      // 3. Perform state mutations\n\n    }, {\n      key: \"push\",\n      value: function push(element) {\n        var oldBack = this._back;\n        var newBack = oldBack;\n\n        if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {\n          newBack = {\n            _elements: [],\n            _next: undefined\n          };\n        } // push() is the mutation most likely to throw an exception, so it\n        // goes first.\n\n\n        oldBack._elements.push(element);\n\n        if (newBack !== oldBack) {\n          this._back = newBack;\n          oldBack._next = newBack;\n        }\n\n        ++this._size;\n      } // Like push(), shift() follows the read -> calculate -> mutate pattern for\n      // exception safety.\n\n    }, {\n      key: \"shift\",\n      value: function shift() {\n        // must not be called on an empty queue\n        var oldFront = this._front;\n        var newFront = oldFront;\n        var oldCursor = this._cursor;\n        var newCursor = oldCursor + 1;\n        var elements = oldFront._elements;\n        var element = elements[oldCursor];\n\n        if (newCursor === QUEUE_MAX_ARRAY_SIZE) {\n          newFront = oldFront._next;\n          newCursor = 0;\n        } // No mutations before this point.\n\n\n        --this._size;\n        this._cursor = newCursor;\n\n        if (oldFront !== newFront) {\n          this._front = newFront;\n        } // Permit shifted element to be garbage collected.\n\n\n        elements[oldCursor] = undefined;\n        return element;\n      } // The tricky thing about forEach() is that it can be called\n      // re-entrantly. The queue may be mutated inside the callback. It is easy to\n      // see that push() within the callback has no negative effects since the end\n      // of the queue is checked for on every iteration. If shift() is called\n      // repeatedly within the callback then the next iteration may return an\n      // element that has been removed. In this case the callback will be called\n      // with undefined values until we either \"catch up\" with elements that still\n      // exist or reach the back of the queue.\n\n    }, {\n      key: \"forEach\",\n      value: function forEach(callback) {\n        var i = this._cursor;\n        var node = this._front;\n        var elements = node._elements;\n\n        while (i !== elements.length || node._next !== undefined) {\n          if (i === elements.length) {\n            node = node._next;\n            elements = node._elements;\n            i = 0;\n\n            if (elements.length === 0) {\n              break;\n            }\n          }\n\n          callback(elements[i]);\n          ++i;\n        }\n      } // Return the element that would be returned if shift() was called now,\n      // without modifying the queue.\n\n    }, {\n      key: \"peek\",\n      value: function peek() {\n        // must not be called on an empty queue\n        var front = this._front;\n        var cursor = this._cursor;\n        return front._elements[cursor];\n      }\n    }]);\n\n    return SimpleQueue;\n  }();\n\n  function ReadableStreamReaderGenericInitialize(reader, stream) {\n    reader._ownerReadableStream = stream;\n    stream._reader = reader;\n\n    if (stream._state === 'readable') {\n      defaultReaderClosedPromiseInitialize(reader);\n    } else if (stream._state === 'closed') {\n      defaultReaderClosedPromiseInitializeAsResolved(reader);\n    } else {\n      defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);\n    }\n  } // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state\n  // check.\n\n\n  function ReadableStreamReaderGenericCancel(reader, reason) {\n    var stream = reader._ownerReadableStream;\n    return ReadableStreamCancel(stream, reason);\n  }\n\n  function ReadableStreamReaderGenericRelease(reader) {\n    if (reader._ownerReadableStream._state === 'readable') {\n      defaultReaderClosedPromiseReject(reader, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\"));\n    } else {\n      defaultReaderClosedPromiseResetToRejected(reader, new TypeError(\"Reader was released and can no longer be used to monitor the stream's closedness\"));\n    }\n\n    reader._ownerReadableStream._reader = undefined;\n    reader._ownerReadableStream = undefined;\n  } // Helper functions for the readers.\n\n\n  function readerLockException(name) {\n    return new TypeError('Cannot ' + name + ' a stream using a released reader');\n  } // Helper functions for the ReadableStreamDefaultReader.\n\n\n  function defaultReaderClosedPromiseInitialize(reader) {\n    reader._closedPromise = newPromise(function (resolve, reject) {\n      reader._closedPromise_resolve = resolve;\n      reader._closedPromise_reject = reject;\n    });\n  }\n\n  function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {\n    defaultReaderClosedPromiseInitialize(reader);\n    defaultReaderClosedPromiseReject(reader, reason);\n  }\n\n  function defaultReaderClosedPromiseInitializeAsResolved(reader) {\n    defaultReaderClosedPromiseInitialize(reader);\n    defaultReaderClosedPromiseResolve(reader);\n  }\n\n  function defaultReaderClosedPromiseReject(reader, reason) {\n    if (reader._closedPromise_reject === undefined) {\n      return;\n    }\n\n    setPromiseIsHandledToTrue(reader._closedPromise);\n\n    reader._closedPromise_reject(reason);\n\n    reader._closedPromise_resolve = undefined;\n    reader._closedPromise_reject = undefined;\n  }\n\n  function defaultReaderClosedPromiseResetToRejected(reader, reason) {\n    defaultReaderClosedPromiseInitializeAsRejected(reader, reason);\n  }\n\n  function defaultReaderClosedPromiseResolve(reader) {\n    if (reader._closedPromise_resolve === undefined) {\n      return;\n    }\n\n    reader._closedPromise_resolve(undefined);\n\n    reader._closedPromise_resolve = undefined;\n    reader._closedPromise_reject = undefined;\n  }\n\n  var AbortSteps = SymbolPolyfill('[[AbortSteps]]');\n  var ErrorSteps = SymbolPolyfill('[[ErrorSteps]]');\n  var CancelSteps = SymbolPolyfill('[[CancelSteps]]');\n  var PullSteps = SymbolPolyfill('[[PullSteps]]'); /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill\n\n  var NumberIsFinite = Number.isFinite || function (x) {\n    return typeof x === 'number' && isFinite(x);\n  }; /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill\n\n\n  var MathTrunc = Math.trunc || function (v) {\n    return v < 0 ? Math.ceil(v) : Math.floor(v);\n  }; // https://heycam.github.io/webidl/#idl-dictionaries\n\n\n  function isDictionary(x) {\n    return _typeof(x) === 'object' || typeof x === 'function';\n  }\n\n  function assertDictionary(obj, context) {\n    if (obj !== undefined && !isDictionary(obj)) {\n      throw new TypeError(\"\".concat(context, \" is not an object.\"));\n    }\n  } // https://heycam.github.io/webidl/#idl-callback-functions\n\n\n  function assertFunction(x, context) {\n    if (typeof x !== 'function') {\n      throw new TypeError(\"\".concat(context, \" is not a function.\"));\n    }\n  } // https://heycam.github.io/webidl/#idl-object\n\n\n  function isObject(x) {\n    return _typeof(x) === 'object' && x !== null || typeof x === 'function';\n  }\n\n  function assertObject(x, context) {\n    if (!isObject(x)) {\n      throw new TypeError(\"\".concat(context, \" is not an object.\"));\n    }\n  }\n\n  function assertRequiredArgument(x, position, context) {\n    if (x === undefined) {\n      throw new TypeError(\"Parameter \".concat(position, \" is required in '\").concat(context, \"'.\"));\n    }\n  }\n\n  function assertRequiredField(x, field, context) {\n    if (x === undefined) {\n      throw new TypeError(\"\".concat(field, \" is required in '\").concat(context, \"'.\"));\n    }\n  } // https://heycam.github.io/webidl/#idl-unrestricted-double\n\n\n  function convertUnrestrictedDouble(value) {\n    return Number(value);\n  }\n\n  function censorNegativeZero(x) {\n    return x === 0 ? 0 : x;\n  }\n\n  function integerPart(x) {\n    return censorNegativeZero(MathTrunc(x));\n  } // https://heycam.github.io/webidl/#idl-unsigned-long-long\n\n\n  function convertUnsignedLongLongWithEnforceRange(value, context) {\n    var lowerBound = 0;\n    var upperBound = Number.MAX_SAFE_INTEGER;\n    var x = Number(value);\n    x = censorNegativeZero(x);\n\n    if (!NumberIsFinite(x)) {\n      throw new TypeError(\"\".concat(context, \" is not a finite number\"));\n    }\n\n    x = integerPart(x);\n\n    if (x < lowerBound || x > upperBound) {\n      throw new TypeError(\"\".concat(context, \" is outside the accepted range of \").concat(lowerBound, \" to \").concat(upperBound, \", inclusive\"));\n    }\n\n    if (!NumberIsFinite(x) || x === 0) {\n      return 0;\n    } // TODO Use BigInt if supported?\n    // let xBigInt = BigInt(integerPart(x));\n    // xBigInt = BigInt.asUintN(64, xBigInt);\n    // return Number(xBigInt);\n\n\n    return x;\n  }\n\n  function assertReadableStream(x, context) {\n    if (!IsReadableStream(x)) {\n      throw new TypeError(\"\".concat(context, \" is not a ReadableStream.\"));\n    }\n  } // Abstract operations for the ReadableStream.\n\n\n  function AcquireReadableStreamDefaultReader(stream) {\n    return new ReadableStreamDefaultReader(stream);\n  } // ReadableStream API exposed for controllers.\n\n\n  function ReadableStreamAddReadRequest(stream, readRequest) {\n    stream._reader._readRequests.push(readRequest);\n  }\n\n  function ReadableStreamFulfillReadRequest(stream, chunk, done) {\n    var reader = stream._reader;\n\n    var readRequest = reader._readRequests.shift();\n\n    if (done) {\n      readRequest._closeSteps();\n    } else {\n      readRequest._chunkSteps(chunk);\n    }\n  }\n\n  function ReadableStreamGetNumReadRequests(stream) {\n    return stream._reader._readRequests.length;\n  }\n\n  function ReadableStreamHasDefaultReader(stream) {\n    var reader = stream._reader;\n\n    if (reader === undefined) {\n      return false;\n    }\n\n    if (!IsReadableStreamDefaultReader(reader)) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * A default reader vended by a {@link ReadableStream}.\n   *\n   * @public\n   */\n\n\n  var ReadableStreamDefaultReader = /*#__PURE__*/function () {\n    function ReadableStreamDefaultReader(stream) {\n      _classCallCheck(this, ReadableStreamDefaultReader);\n\n      assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');\n      assertReadableStream(stream, 'First parameter');\n\n      if (IsReadableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n      }\n\n      ReadableStreamReaderGenericInitialize(this, stream);\n      this._readRequests = new SimpleQueue();\n    }\n    /**\n     * Returns a promise that will be fulfilled when the stream becomes closed,\n     * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.\n     */\n\n\n    _createClass(ReadableStreamDefaultReader, [{\n      key: \"closed\",\n      get: function get() {\n        if (!IsReadableStreamDefaultReader(this)) {\n          return promiseRejectedWith(defaultReaderBrandCheckException('closed'));\n        }\n\n        return this._closedPromise;\n      }\n      /**\n       * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n       */\n\n    }, {\n      key: \"cancel\",\n      value: function cancel() {\n        var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!IsReadableStreamDefaultReader(this)) {\n          return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));\n        }\n\n        if (this._ownerReadableStream === undefined) {\n          return promiseRejectedWith(readerLockException('cancel'));\n        }\n\n        return ReadableStreamReaderGenericCancel(this, reason);\n      }\n      /**\n       * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.\n       *\n       * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n       */\n\n    }, {\n      key: \"read\",\n      value: function read() {\n        if (!IsReadableStreamDefaultReader(this)) {\n          return promiseRejectedWith(defaultReaderBrandCheckException('read'));\n        }\n\n        if (this._ownerReadableStream === undefined) {\n          return promiseRejectedWith(readerLockException('read from'));\n        }\n\n        var resolvePromise;\n        var rejectPromise;\n        var promise = newPromise(function (resolve, reject) {\n          resolvePromise = resolve;\n          rejectPromise = reject;\n        });\n        var readRequest = {\n          _chunkSteps: function _chunkSteps(chunk) {\n            return resolvePromise({\n              value: chunk,\n              done: false\n            });\n          },\n          _closeSteps: function _closeSteps() {\n            return resolvePromise({\n              value: undefined,\n              done: true\n            });\n          },\n          _errorSteps: function _errorSteps(e) {\n            return rejectPromise(e);\n          }\n        };\n        ReadableStreamDefaultReaderRead(this, readRequest);\n        return promise;\n      }\n      /**\n       * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n       * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n       * from now on; otherwise, the reader will appear closed.\n       *\n       * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n       * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to\n       * do so will throw a `TypeError` and leave the reader locked to the stream.\n       */\n\n    }, {\n      key: \"releaseLock\",\n      value: function releaseLock() {\n        if (!IsReadableStreamDefaultReader(this)) {\n          throw defaultReaderBrandCheckException('releaseLock');\n        }\n\n        if (this._ownerReadableStream === undefined) {\n          return;\n        }\n\n        if (this._readRequests.length > 0) {\n          throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n        }\n\n        ReadableStreamReaderGenericRelease(this);\n      }\n    }]);\n\n    return ReadableStreamDefaultReader;\n  }();\n\n  Object.defineProperties(ReadableStreamDefaultReader.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    read: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    }\n  });\n\n  if (_typeof(SymbolPolyfill.toStringTag) === 'symbol') {\n    Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamDefaultReader',\n      configurable: true\n    });\n  } // Abstract operations for the readers.\n\n\n  function IsReadableStreamDefaultReader(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {\n      return false;\n    }\n\n    return x instanceof ReadableStreamDefaultReader;\n  }\n\n  function ReadableStreamDefaultReaderRead(reader, readRequest) {\n    var stream = reader._ownerReadableStream;\n    stream._disturbed = true;\n\n    if (stream._state === 'closed') {\n      readRequest._closeSteps();\n    } else if (stream._state === 'errored') {\n      readRequest._errorSteps(stream._storedError);\n    } else {\n      stream._readableStreamController[PullSteps](readRequest);\n    }\n  } // Helper functions for the ReadableStreamDefaultReader.\n\n\n  function defaultReaderBrandCheckException(name) {\n    return new TypeError(\"ReadableStreamDefaultReader.prototype.\".concat(name, \" can only be used on a ReadableStreamDefaultReader\"));\n  } /// <reference lib=\"es2018.asynciterable\" />\n\n  /* eslint-disable @typescript-eslint/no-empty-function */\n\n\n  var AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf( /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }))).prototype); /// <reference lib=\"es2018.asynciterable\" />\n\n  var ReadableStreamAsyncIteratorImpl = /*#__PURE__*/function () {\n    function ReadableStreamAsyncIteratorImpl(reader, preventCancel) {\n      _classCallCheck(this, ReadableStreamAsyncIteratorImpl);\n\n      this._ongoingPromise = undefined;\n      this._isFinished = false;\n      this._reader = reader;\n      this._preventCancel = preventCancel;\n    }\n\n    _createClass(ReadableStreamAsyncIteratorImpl, [{\n      key: \"next\",\n      value: function next() {\n        var _this = this;\n\n        var nextSteps = function nextSteps() {\n          return _this._nextSteps();\n        };\n\n        this._ongoingPromise = this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) : nextSteps();\n        return this._ongoingPromise;\n      }\n    }, {\n      key: \"return\",\n      value: function _return(value) {\n        var _this2 = this;\n\n        var returnSteps = function returnSteps() {\n          return _this2._returnSteps(value);\n        };\n\n        return this._ongoingPromise ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) : returnSteps();\n      }\n    }, {\n      key: \"_nextSteps\",\n      value: function _nextSteps() {\n        var _this3 = this;\n\n        if (this._isFinished) {\n          return Promise.resolve({\n            value: undefined,\n            done: true\n          });\n        }\n\n        var reader = this._reader;\n\n        if (reader._ownerReadableStream === undefined) {\n          return promiseRejectedWith(readerLockException('iterate'));\n        }\n\n        var resolvePromise;\n        var rejectPromise;\n        var promise = newPromise(function (resolve, reject) {\n          resolvePromise = resolve;\n          rejectPromise = reject;\n        });\n        var readRequest = {\n          _chunkSteps: function _chunkSteps(chunk) {\n            _this3._ongoingPromise = undefined; // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.\n            // FIXME Is this a bug in the specification, or in the test?\n\n            queueMicrotask(function () {\n              return resolvePromise({\n                value: chunk,\n                done: false\n              });\n            });\n          },\n          _closeSteps: function _closeSteps() {\n            _this3._ongoingPromise = undefined;\n            _this3._isFinished = true;\n            ReadableStreamReaderGenericRelease(reader);\n            resolvePromise({\n              value: undefined,\n              done: true\n            });\n          },\n          _errorSteps: function _errorSteps(reason) {\n            _this3._ongoingPromise = undefined;\n            _this3._isFinished = true;\n            ReadableStreamReaderGenericRelease(reader);\n            rejectPromise(reason);\n          }\n        };\n        ReadableStreamDefaultReaderRead(reader, readRequest);\n        return promise;\n      }\n    }, {\n      key: \"_returnSteps\",\n      value: function _returnSteps(value) {\n        if (this._isFinished) {\n          return Promise.resolve({\n            value: value,\n            done: true\n          });\n        }\n\n        this._isFinished = true;\n        var reader = this._reader;\n\n        if (reader._ownerReadableStream === undefined) {\n          return promiseRejectedWith(readerLockException('finish iterating'));\n        }\n\n        if (!this._preventCancel) {\n          var result = ReadableStreamReaderGenericCancel(reader, value);\n          ReadableStreamReaderGenericRelease(reader);\n          return transformPromiseWith(result, function () {\n            return {\n              value: value,\n              done: true\n            };\n          });\n        }\n\n        ReadableStreamReaderGenericRelease(reader);\n        return promiseResolvedWith({\n          value: value,\n          done: true\n        });\n      }\n    }]);\n\n    return ReadableStreamAsyncIteratorImpl;\n  }();\n\n  var ReadableStreamAsyncIteratorPrototype = {\n    next: function next() {\n      if (!IsReadableStreamAsyncIterator(this)) {\n        return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));\n      }\n\n      return this._asyncIteratorImpl.next();\n    },\n    return: function _return(value) {\n      if (!IsReadableStreamAsyncIterator(this)) {\n        return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));\n      }\n\n      return this._asyncIteratorImpl.return(value);\n    }\n  };\n\n  if (AsyncIteratorPrototype !== undefined) {\n    Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);\n  } // Abstract operations for the ReadableStream.\n\n\n  function AcquireReadableStreamAsyncIterator(stream, preventCancel) {\n    var reader = AcquireReadableStreamDefaultReader(stream);\n    var impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);\n    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype);\n    iterator._asyncIteratorImpl = impl;\n    return iterator;\n  }\n\n  function IsReadableStreamAsyncIterator(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {\n      return false;\n    }\n\n    try {\n      // noinspection SuspiciousTypeOfGuard\n      return x._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;\n    } catch (_a) {\n      return false;\n    }\n  } // Helper functions for the ReadableStream.\n\n\n  function streamAsyncIteratorBrandCheckException(name) {\n    return new TypeError(\"ReadableStreamAsyncIterator.\".concat(name, \" can only be used on a ReadableSteamAsyncIterator\"));\n  } /// <reference lib=\"es2015.core\" />\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill\n\n\n  var NumberIsNaN = Number.isNaN || function (x) {\n    // eslint-disable-next-line no-self-compare\n    return x !== x;\n  };\n\n  function CreateArrayFromList(elements) {\n    // We use arrays to represent lists, so this is basically a no-op.\n    // Do a slice though just in case we happen to depend on the unique-ness.\n    return elements.slice();\n  }\n\n  function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {\n    new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);\n  } // Not implemented correctly\n\n\n  function TransferArrayBuffer(O) {\n    return O;\n  } // Not implemented correctly\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  function IsDetachedBuffer(O) {\n    return false;\n  }\n\n  function ArrayBufferSlice(buffer, begin, end) {\n    // ArrayBuffer.prototype.slice is not available on IE10\n    // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice\n    if (buffer.slice) {\n      return buffer.slice(begin, end);\n    }\n\n    var length = end - begin;\n    var slice = new ArrayBuffer(length);\n    CopyDataBlockBytes(slice, 0, buffer, begin, length);\n    return slice;\n  }\n\n  function IsNonNegativeNumber(v) {\n    if (typeof v !== 'number') {\n      return false;\n    }\n\n    if (NumberIsNaN(v)) {\n      return false;\n    }\n\n    if (v < 0) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function CloneAsUint8Array(O) {\n    var buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);\n    return new Uint8Array(buffer);\n  }\n\n  function DequeueValue(container) {\n    var pair = container._queue.shift();\n\n    container._queueTotalSize -= pair.size;\n\n    if (container._queueTotalSize < 0) {\n      container._queueTotalSize = 0;\n    }\n\n    return pair.value;\n  }\n\n  function EnqueueValueWithSize(container, value, size) {\n    if (!IsNonNegativeNumber(size) || size === Infinity) {\n      throw new RangeError('Size must be a finite, non-NaN, non-negative number.');\n    }\n\n    container._queue.push({\n      value: value,\n      size: size\n    });\n\n    container._queueTotalSize += size;\n  }\n\n  function PeekQueueValue(container) {\n    var pair = container._queue.peek();\n\n    return pair.value;\n  }\n\n  function ResetQueue(container) {\n    container._queue = new SimpleQueue();\n    container._queueTotalSize = 0;\n  }\n  /**\n   * A pull-into request in a {@link ReadableByteStreamController}.\n   *\n   * @public\n   */\n\n\n  var ReadableStreamBYOBRequest = /*#__PURE__*/function () {\n    function ReadableStreamBYOBRequest() {\n      _classCallCheck(this, ReadableStreamBYOBRequest);\n\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.\n     */\n\n\n    _createClass(ReadableStreamBYOBRequest, [{\n      key: \"view\",\n      get: function get() {\n        if (!IsReadableStreamBYOBRequest(this)) {\n          throw byobRequestBrandCheckException('view');\n        }\n\n        return this._view;\n      }\n    }, {\n      key: \"respond\",\n      value: function respond(bytesWritten) {\n        if (!IsReadableStreamBYOBRequest(this)) {\n          throw byobRequestBrandCheckException('respond');\n        }\n\n        assertRequiredArgument(bytesWritten, 1, 'respond');\n        bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');\n\n        if (this._associatedReadableByteStreamController === undefined) {\n          throw new TypeError('This BYOB request has been invalidated');\n        }\n\n        if (IsDetachedBuffer(this._view.buffer)) ;\n        ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);\n      }\n    }, {\n      key: \"respondWithNewView\",\n      value: function respondWithNewView(view) {\n        if (!IsReadableStreamBYOBRequest(this)) {\n          throw byobRequestBrandCheckException('respondWithNewView');\n        }\n\n        assertRequiredArgument(view, 1, 'respondWithNewView');\n\n        if (!ArrayBuffer.isView(view)) {\n          throw new TypeError('You can only respond with array buffer views');\n        }\n\n        if (this._associatedReadableByteStreamController === undefined) {\n          throw new TypeError('This BYOB request has been invalidated');\n        }\n\n        if (IsDetachedBuffer(view.buffer)) ;\n        ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);\n      }\n    }]);\n\n    return ReadableStreamBYOBRequest;\n  }();\n\n  Object.defineProperties(ReadableStreamBYOBRequest.prototype, {\n    respond: {\n      enumerable: true\n    },\n    respondWithNewView: {\n      enumerable: true\n    },\n    view: {\n      enumerable: true\n    }\n  });\n\n  if (_typeof(SymbolPolyfill.toStringTag) === 'symbol') {\n    Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamBYOBRequest',\n      configurable: true\n    });\n  }\n  /**\n   * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.\n   *\n   * @public\n   */\n\n\n  var ReadableByteStreamController = /*#__PURE__*/function () {\n    function ReadableByteStreamController() {\n      _classCallCheck(this, ReadableByteStreamController);\n\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * Returns the current BYOB pull request, or `null` if there isn't one.\n     */\n\n\n    _createClass(ReadableByteStreamController, [{\n      key: \"byobRequest\",\n      get: function get() {\n        if (!IsReadableByteStreamController(this)) {\n          throw byteStreamControllerBrandCheckException('byobRequest');\n        }\n\n        return ReadableByteStreamControllerGetBYOBRequest(this);\n      }\n      /**\n       * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n       * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.\n       */\n\n    }, {\n      key: \"desiredSize\",\n      get: function get() {\n        if (!IsReadableByteStreamController(this)) {\n          throw byteStreamControllerBrandCheckException('desiredSize');\n        }\n\n        return ReadableByteStreamControllerGetDesiredSize(this);\n      }\n      /**\n       * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n       * the stream, but once those are read, the stream will become closed.\n       */\n\n    }, {\n      key: \"close\",\n      value: function close() {\n        if (!IsReadableByteStreamController(this)) {\n          throw byteStreamControllerBrandCheckException('close');\n        }\n\n        if (this._closeRequested) {\n          throw new TypeError('The stream has already been closed; do not close it again!');\n        }\n\n        var state = this._controlledReadableByteStream._state;\n\n        if (state !== 'readable') {\n          throw new TypeError(\"The stream (in \".concat(state, \" state) is not in the readable state and cannot be closed\"));\n        }\n\n        ReadableByteStreamControllerClose(this);\n      }\n    }, {\n      key: \"enqueue\",\n      value: function enqueue(chunk) {\n        if (!IsReadableByteStreamController(this)) {\n          throw byteStreamControllerBrandCheckException('enqueue');\n        }\n\n        assertRequiredArgument(chunk, 1, 'enqueue');\n\n        if (!ArrayBuffer.isView(chunk)) {\n          throw new TypeError('chunk must be an array buffer view');\n        }\n\n        if (chunk.byteLength === 0) {\n          throw new TypeError('chunk must have non-zero byteLength');\n        }\n\n        if (chunk.buffer.byteLength === 0) {\n          throw new TypeError(\"chunk's buffer must have non-zero byteLength\");\n        }\n\n        if (this._closeRequested) {\n          throw new TypeError('stream is closed or draining');\n        }\n\n        var state = this._controlledReadableByteStream._state;\n\n        if (state !== 'readable') {\n          throw new TypeError(\"The stream (in \".concat(state, \" state) is not in the readable state and cannot be enqueued to\"));\n        }\n\n        ReadableByteStreamControllerEnqueue(this, chunk);\n      }\n      /**\n       * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n       */\n\n    }, {\n      key: \"error\",\n      value: function error() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!IsReadableByteStreamController(this)) {\n          throw byteStreamControllerBrandCheckException('error');\n        }\n\n        ReadableByteStreamControllerError(this, e);\n      }\n      /** @internal */\n\n    }, {\n      key: CancelSteps,\n      value: function value(reason) {\n        ReadableByteStreamControllerClearPendingPullIntos(this);\n        ResetQueue(this);\n\n        var result = this._cancelAlgorithm(reason);\n\n        ReadableByteStreamControllerClearAlgorithms(this);\n        return result;\n      }\n      /** @internal */\n\n    }, {\n      key: PullSteps,\n      value: function value(readRequest) {\n        var stream = this._controlledReadableByteStream;\n\n        if (this._queueTotalSize > 0) {\n          var entry = this._queue.shift();\n\n          this._queueTotalSize -= entry.byteLength;\n          ReadableByteStreamControllerHandleQueueDrain(this);\n          var view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);\n\n          readRequest._chunkSteps(view);\n\n          return;\n        }\n\n        var autoAllocateChunkSize = this._autoAllocateChunkSize;\n\n        if (autoAllocateChunkSize !== undefined) {\n          var buffer;\n\n          try {\n            buffer = new ArrayBuffer(autoAllocateChunkSize);\n          } catch (bufferE) {\n            readRequest._errorSteps(bufferE);\n\n            return;\n          }\n\n          var pullIntoDescriptor = {\n            buffer: buffer,\n            bufferByteLength: autoAllocateChunkSize,\n            byteOffset: 0,\n            byteLength: autoAllocateChunkSize,\n            bytesFilled: 0,\n            elementSize: 1,\n            viewConstructor: Uint8Array,\n            readerType: 'default'\n          };\n\n          this._pendingPullIntos.push(pullIntoDescriptor);\n        }\n\n        ReadableStreamAddReadRequest(stream, readRequest);\n        ReadableByteStreamControllerCallPullIfNeeded(this);\n      }\n    }]);\n\n    return ReadableByteStreamController;\n  }();\n\n  Object.defineProperties(ReadableByteStreamController.prototype, {\n    close: {\n      enumerable: true\n    },\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    byobRequest: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n\n  if (_typeof(SymbolPolyfill.toStringTag) === 'symbol') {\n    Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableByteStreamController',\n      configurable: true\n    });\n  } // Abstract operations for the ReadableByteStreamController.\n\n\n  function IsReadableByteStreamController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {\n      return false;\n    }\n\n    return x instanceof ReadableByteStreamController;\n  }\n\n  function IsReadableStreamBYOBRequest(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {\n      return false;\n    }\n\n    return x instanceof ReadableStreamBYOBRequest;\n  }\n\n  function ReadableByteStreamControllerCallPullIfNeeded(controller) {\n    var shouldPull = ReadableByteStreamControllerShouldCallPull(controller);\n\n    if (!shouldPull) {\n      return;\n    }\n\n    if (controller._pulling) {\n      controller._pullAgain = true;\n      return;\n    }\n\n    controller._pulling = true; // TODO: Test controller argument\n\n    var pullPromise = controller._pullAlgorithm();\n\n    uponPromise(pullPromise, function () {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableByteStreamControllerCallPullIfNeeded(controller);\n      }\n    }, function (e) {\n      ReadableByteStreamControllerError(controller, e);\n    });\n  }\n\n  function ReadableByteStreamControllerClearPendingPullIntos(controller) {\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n    controller._pendingPullIntos = new SimpleQueue();\n  }\n\n  function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {\n    var done = false;\n\n    if (stream._state === 'closed') {\n      done = true;\n    }\n\n    var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n\n    if (pullIntoDescriptor.readerType === 'default') {\n      ReadableStreamFulfillReadRequest(stream, filledView, done);\n    } else {\n      ReadableStreamFulfillReadIntoRequest(stream, filledView, done);\n    }\n  }\n\n  function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {\n    var bytesFilled = pullIntoDescriptor.bytesFilled;\n    var elementSize = pullIntoDescriptor.elementSize;\n    return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);\n  }\n\n  function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {\n    controller._queue.push({\n      buffer: buffer,\n      byteOffset: byteOffset,\n      byteLength: byteLength\n    });\n\n    controller._queueTotalSize += byteLength;\n  }\n\n  function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {\n    var elementSize = pullIntoDescriptor.elementSize;\n    var currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;\n    var maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);\n    var maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;\n    var maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;\n    var totalBytesToCopyRemaining = maxBytesToCopy;\n    var ready = false;\n\n    if (maxAlignedBytes > currentAlignedBytes) {\n      totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;\n      ready = true;\n    }\n\n    var queue = controller._queue;\n\n    while (totalBytesToCopyRemaining > 0) {\n      var headOfQueue = queue.peek();\n      var bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);\n      var destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n      CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);\n\n      if (headOfQueue.byteLength === bytesToCopy) {\n        queue.shift();\n      } else {\n        headOfQueue.byteOffset += bytesToCopy;\n        headOfQueue.byteLength -= bytesToCopy;\n      }\n\n      controller._queueTotalSize -= bytesToCopy;\n      ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);\n      totalBytesToCopyRemaining -= bytesToCopy;\n    }\n\n    return ready;\n  }\n\n  function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {\n    pullIntoDescriptor.bytesFilled += size;\n  }\n\n  function ReadableByteStreamControllerHandleQueueDrain(controller) {\n    if (controller._queueTotalSize === 0 && controller._closeRequested) {\n      ReadableByteStreamControllerClearAlgorithms(controller);\n      ReadableStreamClose(controller._controlledReadableByteStream);\n    } else {\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }\n  }\n\n  function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {\n    if (controller._byobRequest === null) {\n      return;\n    }\n\n    controller._byobRequest._associatedReadableByteStreamController = undefined;\n    controller._byobRequest._view = null;\n    controller._byobRequest = null;\n  }\n\n  function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {\n    while (controller._pendingPullIntos.length > 0) {\n      if (controller._queueTotalSize === 0) {\n        return;\n      }\n\n      var pullIntoDescriptor = controller._pendingPullIntos.peek();\n\n      if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n        ReadableByteStreamControllerShiftPendingPullInto(controller);\n        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n      }\n    }\n  }\n\n  function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {\n    var stream = controller._controlledReadableByteStream;\n    var elementSize = 1;\n\n    if (view.constructor !== DataView) {\n      elementSize = view.constructor.BYTES_PER_ELEMENT;\n    }\n\n    var ctor = view.constructor; // try {\n\n    var buffer = TransferArrayBuffer(view.buffer); // } catch (e) {\n    //   readIntoRequest._errorSteps(e);\n    //   return;\n    // }\n\n    var pullIntoDescriptor = {\n      buffer: buffer,\n      bufferByteLength: buffer.byteLength,\n      byteOffset: view.byteOffset,\n      byteLength: view.byteLength,\n      bytesFilled: 0,\n      elementSize: elementSize,\n      viewConstructor: ctor,\n      readerType: 'byob'\n    };\n\n    if (controller._pendingPullIntos.length > 0) {\n      controller._pendingPullIntos.push(pullIntoDescriptor); // No ReadableByteStreamControllerCallPullIfNeeded() call since:\n      // - No change happens on desiredSize\n      // - The source has already been notified of that there's at least 1 pending read(view)\n\n\n      ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n      return;\n    }\n\n    if (stream._state === 'closed') {\n      var emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);\n\n      readIntoRequest._closeSteps(emptyView);\n\n      return;\n    }\n\n    if (controller._queueTotalSize > 0) {\n      if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {\n        var filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);\n        ReadableByteStreamControllerHandleQueueDrain(controller);\n\n        readIntoRequest._chunkSteps(filledView);\n\n        return;\n      }\n\n      if (controller._closeRequested) {\n        var e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n        ReadableByteStreamControllerError(controller, e);\n\n        readIntoRequest._errorSteps(e);\n\n        return;\n      }\n    }\n\n    controller._pendingPullIntos.push(pullIntoDescriptor);\n\n    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n\n  function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {\n    var stream = controller._controlledReadableByteStream;\n\n    if (ReadableStreamHasBYOBReader(stream)) {\n      while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n        var pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);\n        ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);\n      }\n    }\n  }\n\n  function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {\n    ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);\n\n    if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {\n      return;\n    }\n\n    ReadableByteStreamControllerShiftPendingPullInto(controller);\n    var remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;\n\n    if (remainderSize > 0) {\n      var end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;\n      var remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);\n    }\n\n    pullIntoDescriptor.bytesFilled -= remainderSize;\n    ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);\n    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n  }\n\n  function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {\n    var firstDescriptor = controller._pendingPullIntos.peek();\n\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n    var state = controller._controlledReadableByteStream._state;\n\n    if (state === 'closed') {\n      ReadableByteStreamControllerRespondInClosedState(controller);\n    } else {\n      ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);\n    }\n\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n\n  function ReadableByteStreamControllerShiftPendingPullInto(controller) {\n    var descriptor = controller._pendingPullIntos.shift();\n\n    return descriptor;\n  }\n\n  function ReadableByteStreamControllerShouldCallPull(controller) {\n    var stream = controller._controlledReadableByteStream;\n\n    if (stream._state !== 'readable') {\n      return false;\n    }\n\n    if (controller._closeRequested) {\n      return false;\n    }\n\n    if (!controller._started) {\n      return false;\n    }\n\n    if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      return true;\n    }\n\n    if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {\n      return true;\n    }\n\n    var desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);\n\n    if (desiredSize > 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function ReadableByteStreamControllerClearAlgorithms(controller) {\n    controller._pullAlgorithm = undefined;\n    controller._cancelAlgorithm = undefined;\n  } // A client of ReadableByteStreamController may use these functions directly to bypass state check.\n\n\n  function ReadableByteStreamControllerClose(controller) {\n    var stream = controller._controlledReadableByteStream;\n\n    if (controller._closeRequested || stream._state !== 'readable') {\n      return;\n    }\n\n    if (controller._queueTotalSize > 0) {\n      controller._closeRequested = true;\n      return;\n    }\n\n    if (controller._pendingPullIntos.length > 0) {\n      var firstPendingPullInto = controller._pendingPullIntos.peek();\n\n      if (firstPendingPullInto.bytesFilled > 0) {\n        var e = new TypeError('Insufficient bytes to fill elements in the given buffer');\n        ReadableByteStreamControllerError(controller, e);\n        throw e;\n      }\n    }\n\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamClose(stream);\n  }\n\n  function ReadableByteStreamControllerEnqueue(controller, chunk) {\n    var stream = controller._controlledReadableByteStream;\n\n    if (controller._closeRequested || stream._state !== 'readable') {\n      return;\n    }\n\n    var buffer = chunk.buffer;\n    var byteOffset = chunk.byteOffset;\n    var byteLength = chunk.byteLength;\n    var transferredBuffer = TransferArrayBuffer(buffer);\n\n    if (controller._pendingPullIntos.length > 0) {\n      var firstPendingPullInto = controller._pendingPullIntos.peek();\n\n      if (IsDetachedBuffer(firstPendingPullInto.buffer)) ;\n      firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);\n    }\n\n    ReadableByteStreamControllerInvalidateBYOBRequest(controller);\n\n    if (ReadableStreamHasDefaultReader(stream)) {\n      if (ReadableStreamGetNumReadRequests(stream) === 0) {\n        ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n      } else {\n        var transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);\n        ReadableStreamFulfillReadRequest(stream, transferredView, false);\n      }\n    } else if (ReadableStreamHasBYOBReader(stream)) {\n      // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n      ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);\n    } else {\n      ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);\n    }\n\n    ReadableByteStreamControllerCallPullIfNeeded(controller);\n  }\n\n  function ReadableByteStreamControllerError(controller, e) {\n    var stream = controller._controlledReadableByteStream;\n\n    if (stream._state !== 'readable') {\n      return;\n    }\n\n    ReadableByteStreamControllerClearPendingPullIntos(controller);\n    ResetQueue(controller);\n    ReadableByteStreamControllerClearAlgorithms(controller);\n    ReadableStreamError(stream, e);\n  }\n\n  function ReadableByteStreamControllerGetBYOBRequest(controller) {\n    if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {\n      var firstDescriptor = controller._pendingPullIntos.peek();\n\n      var view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);\n      var byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);\n      SetUpReadableStreamBYOBRequest(byobRequest, controller, view);\n      controller._byobRequest = byobRequest;\n    }\n\n    return controller._byobRequest;\n  }\n\n  function ReadableByteStreamControllerGetDesiredSize(controller) {\n    var state = controller._controlledReadableByteStream._state;\n\n    if (state === 'errored') {\n      return null;\n    }\n\n    if (state === 'closed') {\n      return 0;\n    }\n\n    return controller._strategyHWM - controller._queueTotalSize;\n  }\n\n  function ReadableByteStreamControllerRespond(controller, bytesWritten) {\n    var firstDescriptor = controller._pendingPullIntos.peek();\n\n    var state = controller._controlledReadableByteStream._state;\n\n    if (state === 'closed') {\n      if (bytesWritten !== 0) {\n        throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');\n      }\n    } else {\n      if (bytesWritten === 0) {\n        throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');\n      }\n\n      if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {\n        throw new RangeError('bytesWritten out of range');\n      }\n    }\n\n    firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);\n    ReadableByteStreamControllerRespondInternal(controller, bytesWritten);\n  }\n\n  function ReadableByteStreamControllerRespondWithNewView(controller, view) {\n    var firstDescriptor = controller._pendingPullIntos.peek();\n\n    var state = controller._controlledReadableByteStream._state;\n\n    if (state === 'closed') {\n      if (view.byteLength !== 0) {\n        throw new TypeError('The view\\'s length must be 0 when calling respondWithNewView() on a closed stream');\n      }\n    } else {\n      if (view.byteLength === 0) {\n        throw new TypeError('The view\\'s length must be greater than 0 when calling respondWithNewView() on a readable stream');\n      }\n    }\n\n    if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {\n      throw new RangeError('The region specified by view does not match byobRequest');\n    }\n\n    if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {\n      throw new RangeError('The buffer of view has different capacity than byobRequest');\n    }\n\n    if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {\n      throw new RangeError('The region specified by view is larger than byobRequest');\n    }\n\n    firstDescriptor.buffer = TransferArrayBuffer(view.buffer);\n    ReadableByteStreamControllerRespondInternal(controller, view.byteLength);\n  }\n\n  function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {\n    controller._controlledReadableByteStream = stream;\n    controller._pullAgain = false;\n    controller._pulling = false;\n    controller._byobRequest = null; // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n\n    controller._queue = controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._closeRequested = false;\n    controller._started = false;\n    controller._strategyHWM = highWaterMark;\n    controller._pullAlgorithm = pullAlgorithm;\n    controller._cancelAlgorithm = cancelAlgorithm;\n    controller._autoAllocateChunkSize = autoAllocateChunkSize;\n    controller._pendingPullIntos = new SimpleQueue();\n    stream._readableStreamController = controller;\n    var startResult = startAlgorithm();\n    uponPromise(promiseResolvedWith(startResult), function () {\n      controller._started = true;\n      ReadableByteStreamControllerCallPullIfNeeded(controller);\n    }, function (r) {\n      ReadableByteStreamControllerError(controller, r);\n    });\n  }\n\n  function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {\n    var controller = Object.create(ReadableByteStreamController.prototype);\n\n    var startAlgorithm = function startAlgorithm() {\n      return undefined;\n    };\n\n    var pullAlgorithm = function pullAlgorithm() {\n      return promiseResolvedWith(undefined);\n    };\n\n    var cancelAlgorithm = function cancelAlgorithm() {\n      return promiseResolvedWith(undefined);\n    };\n\n    if (underlyingByteSource.start !== undefined) {\n      startAlgorithm = function startAlgorithm() {\n        return underlyingByteSource.start(controller);\n      };\n    }\n\n    if (underlyingByteSource.pull !== undefined) {\n      pullAlgorithm = function pullAlgorithm() {\n        return underlyingByteSource.pull(controller);\n      };\n    }\n\n    if (underlyingByteSource.cancel !== undefined) {\n      cancelAlgorithm = function cancelAlgorithm(reason) {\n        return underlyingByteSource.cancel(reason);\n      };\n    }\n\n    var autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;\n\n    if (autoAllocateChunkSize === 0) {\n      throw new TypeError('autoAllocateChunkSize must be greater than 0');\n    }\n\n    SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);\n  }\n\n  function SetUpReadableStreamBYOBRequest(request, controller, view) {\n    request._associatedReadableByteStreamController = controller;\n    request._view = view;\n  } // Helper functions for the ReadableStreamBYOBRequest.\n\n\n  function byobRequestBrandCheckException(name) {\n    return new TypeError(\"ReadableStreamBYOBRequest.prototype.\".concat(name, \" can only be used on a ReadableStreamBYOBRequest\"));\n  } // Helper functions for the ReadableByteStreamController.\n\n\n  function byteStreamControllerBrandCheckException(name) {\n    return new TypeError(\"ReadableByteStreamController.prototype.\".concat(name, \" can only be used on a ReadableByteStreamController\"));\n  } // Abstract operations for the ReadableStream.\n\n\n  function AcquireReadableStreamBYOBReader(stream) {\n    return new ReadableStreamBYOBReader(stream);\n  } // ReadableStream API exposed for controllers.\n\n\n  function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {\n    stream._reader._readIntoRequests.push(readIntoRequest);\n  }\n\n  function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {\n    var reader = stream._reader;\n\n    var readIntoRequest = reader._readIntoRequests.shift();\n\n    if (done) {\n      readIntoRequest._closeSteps(chunk);\n    } else {\n      readIntoRequest._chunkSteps(chunk);\n    }\n  }\n\n  function ReadableStreamGetNumReadIntoRequests(stream) {\n    return stream._reader._readIntoRequests.length;\n  }\n\n  function ReadableStreamHasBYOBReader(stream) {\n    var reader = stream._reader;\n\n    if (reader === undefined) {\n      return false;\n    }\n\n    if (!IsReadableStreamBYOBReader(reader)) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * A BYOB reader vended by a {@link ReadableStream}.\n   *\n   * @public\n   */\n\n\n  var ReadableStreamBYOBReader = /*#__PURE__*/function () {\n    function ReadableStreamBYOBReader(stream) {\n      _classCallCheck(this, ReadableStreamBYOBReader);\n\n      assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');\n      assertReadableStream(stream, 'First parameter');\n\n      if (IsReadableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive reading by another reader');\n      }\n\n      if (!IsReadableByteStreamController(stream._readableStreamController)) {\n        throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' + 'source');\n      }\n\n      ReadableStreamReaderGenericInitialize(this, stream);\n      this._readIntoRequests = new SimpleQueue();\n    }\n    /**\n     * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n     * the reader's lock is released before the stream finishes closing.\n     */\n\n\n    _createClass(ReadableStreamBYOBReader, [{\n      key: \"closed\",\n      get: function get() {\n        if (!IsReadableStreamBYOBReader(this)) {\n          return promiseRejectedWith(byobReaderBrandCheckException('closed'));\n        }\n\n        return this._closedPromise;\n      }\n      /**\n       * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.\n       */\n\n    }, {\n      key: \"cancel\",\n      value: function cancel() {\n        var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!IsReadableStreamBYOBReader(this)) {\n          return promiseRejectedWith(byobReaderBrandCheckException('cancel'));\n        }\n\n        if (this._ownerReadableStream === undefined) {\n          return promiseRejectedWith(readerLockException('cancel'));\n        }\n\n        return ReadableStreamReaderGenericCancel(this, reason);\n      }\n      /**\n       * Attempts to reads bytes into view, and returns a promise resolved with the result.\n       *\n       * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.\n       */\n\n    }, {\n      key: \"read\",\n      value: function read(view) {\n        if (!IsReadableStreamBYOBReader(this)) {\n          return promiseRejectedWith(byobReaderBrandCheckException('read'));\n        }\n\n        if (!ArrayBuffer.isView(view)) {\n          return promiseRejectedWith(new TypeError('view must be an array buffer view'));\n        }\n\n        if (view.byteLength === 0) {\n          return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));\n        }\n\n        if (view.buffer.byteLength === 0) {\n          return promiseRejectedWith(new TypeError(\"view's buffer must have non-zero byteLength\"));\n        }\n\n        if (IsDetachedBuffer(view.buffer)) ;\n\n        if (this._ownerReadableStream === undefined) {\n          return promiseRejectedWith(readerLockException('read from'));\n        }\n\n        var resolvePromise;\n        var rejectPromise;\n        var promise = newPromise(function (resolve, reject) {\n          resolvePromise = resolve;\n          rejectPromise = reject;\n        });\n        var readIntoRequest = {\n          _chunkSteps: function _chunkSteps(chunk) {\n            return resolvePromise({\n              value: chunk,\n              done: false\n            });\n          },\n          _closeSteps: function _closeSteps(chunk) {\n            return resolvePromise({\n              value: chunk,\n              done: true\n            });\n          },\n          _errorSteps: function _errorSteps(e) {\n            return rejectPromise(e);\n          }\n        };\n        ReadableStreamBYOBReaderRead(this, view, readIntoRequest);\n        return promise;\n      }\n      /**\n       * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.\n       * If the associated stream is errored when the lock is released, the reader will appear errored in the same way\n       * from now on; otherwise, the reader will appear closed.\n       *\n       * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by\n       * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to\n       * do so will throw a `TypeError` and leave the reader locked to the stream.\n       */\n\n    }, {\n      key: \"releaseLock\",\n      value: function releaseLock() {\n        if (!IsReadableStreamBYOBReader(this)) {\n          throw byobReaderBrandCheckException('releaseLock');\n        }\n\n        if (this._ownerReadableStream === undefined) {\n          return;\n        }\n\n        if (this._readIntoRequests.length > 0) {\n          throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');\n        }\n\n        ReadableStreamReaderGenericRelease(this);\n      }\n    }]);\n\n    return ReadableStreamBYOBReader;\n  }();\n\n  Object.defineProperties(ReadableStreamBYOBReader.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    read: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    }\n  });\n\n  if (_typeof(SymbolPolyfill.toStringTag) === 'symbol') {\n    Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamBYOBReader',\n      configurable: true\n    });\n  } // Abstract operations for the readers.\n\n\n  function IsReadableStreamBYOBReader(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {\n      return false;\n    }\n\n    return x instanceof ReadableStreamBYOBReader;\n  }\n\n  function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {\n    var stream = reader._ownerReadableStream;\n    stream._disturbed = true;\n\n    if (stream._state === 'errored') {\n      readIntoRequest._errorSteps(stream._storedError);\n    } else {\n      ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);\n    }\n  } // Helper functions for the ReadableStreamBYOBReader.\n\n\n  function byobReaderBrandCheckException(name) {\n    return new TypeError(\"ReadableStreamBYOBReader.prototype.\".concat(name, \" can only be used on a ReadableStreamBYOBReader\"));\n  }\n\n  function ExtractHighWaterMark(strategy, defaultHWM) {\n    var highWaterMark = strategy.highWaterMark;\n\n    if (highWaterMark === undefined) {\n      return defaultHWM;\n    }\n\n    if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {\n      throw new RangeError('Invalid highWaterMark');\n    }\n\n    return highWaterMark;\n  }\n\n  function ExtractSizeAlgorithm(strategy) {\n    var size = strategy.size;\n\n    if (!size) {\n      return function () {\n        return 1;\n      };\n    }\n\n    return size;\n  }\n\n  function convertQueuingStrategy(init, context) {\n    assertDictionary(init, context);\n    var highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n    var size = init === null || init === void 0 ? void 0 : init.size;\n    return {\n      highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),\n      size: size === undefined ? undefined : convertQueuingStrategySize(size, \"\".concat(context, \" has member 'size' that\"))\n    };\n  }\n\n  function convertQueuingStrategySize(fn, context) {\n    assertFunction(fn, context);\n    return function (chunk) {\n      return convertUnrestrictedDouble(fn(chunk));\n    };\n  }\n\n  function convertUnderlyingSink(original, context) {\n    assertDictionary(original, context);\n    var abort = original === null || original === void 0 ? void 0 : original.abort;\n    var close = original === null || original === void 0 ? void 0 : original.close;\n    var start = original === null || original === void 0 ? void 0 : original.start;\n    var type = original === null || original === void 0 ? void 0 : original.type;\n    var write = original === null || original === void 0 ? void 0 : original.write;\n    return {\n      abort: abort === undefined ? undefined : convertUnderlyingSinkAbortCallback(abort, original, \"\".concat(context, \" has member 'abort' that\")),\n      close: close === undefined ? undefined : convertUnderlyingSinkCloseCallback(close, original, \"\".concat(context, \" has member 'close' that\")),\n      start: start === undefined ? undefined : convertUnderlyingSinkStartCallback(start, original, \"\".concat(context, \" has member 'start' that\")),\n      write: write === undefined ? undefined : convertUnderlyingSinkWriteCallback(write, original, \"\".concat(context, \" has member 'write' that\")),\n      type: type\n    };\n  }\n\n  function convertUnderlyingSinkAbortCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (reason) {\n      return promiseCall(fn, original, [reason]);\n    };\n  }\n\n  function convertUnderlyingSinkCloseCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function () {\n      return promiseCall(fn, original, []);\n    };\n  }\n\n  function convertUnderlyingSinkStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return reflectCall(fn, original, [controller]);\n    };\n  }\n\n  function convertUnderlyingSinkWriteCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (chunk, controller) {\n      return promiseCall(fn, original, [chunk, controller]);\n    };\n  }\n\n  function assertWritableStream(x, context) {\n    if (!IsWritableStream(x)) {\n      throw new TypeError(\"\".concat(context, \" is not a WritableStream.\"));\n    }\n  }\n\n  function isAbortSignal(value) {\n    if (_typeof(value) !== 'object' || value === null) {\n      return false;\n    }\n\n    try {\n      return typeof value.aborted === 'boolean';\n    } catch (_a) {\n      // AbortSignal.prototype.aborted throws if its brand check fails\n      return false;\n    }\n  }\n\n  var supportsAbortController = typeof AbortController === 'function';\n  /**\n   * Construct a new AbortController, if supported by the platform.\n   *\n   * @internal\n   */\n\n  function createAbortController() {\n    if (supportsAbortController) {\n      return new AbortController();\n    }\n\n    return undefined;\n  }\n  /**\n   * A writable stream represents a destination for data, into which you can write.\n   *\n   * @public\n   */\n\n\n  var WritableStream = /*#__PURE__*/function () {\n    function WritableStream() {\n      var rawUnderlyingSink = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var rawStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, WritableStream);\n\n      if (rawUnderlyingSink === undefined) {\n        rawUnderlyingSink = null;\n      } else {\n        assertObject(rawUnderlyingSink, 'First parameter');\n      }\n\n      var strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n      var underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');\n      InitializeWritableStream(this);\n      var type = underlyingSink.type;\n\n      if (type !== undefined) {\n        throw new RangeError('Invalid type is specified');\n      }\n\n      var sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n      var highWaterMark = ExtractHighWaterMark(strategy, 1);\n      SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);\n    }\n    /**\n     * Returns whether or not the writable stream is locked to a writer.\n     */\n\n\n    _createClass(WritableStream, [{\n      key: \"locked\",\n      get: function get() {\n        if (!IsWritableStream(this)) {\n          throw streamBrandCheckException$2('locked');\n        }\n\n        return IsWritableStreamLocked(this);\n      }\n      /**\n       * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be\n       * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort\n       * mechanism of the underlying sink.\n       *\n       * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled\n       * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel\n       * the stream) if the stream is currently locked.\n       */\n\n    }, {\n      key: \"abort\",\n      value: function abort() {\n        var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!IsWritableStream(this)) {\n          return promiseRejectedWith(streamBrandCheckException$2('abort'));\n        }\n\n        if (IsWritableStreamLocked(this)) {\n          return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));\n        }\n\n        return WritableStreamAbort(this, reason);\n      }\n      /**\n       * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its\n       * close behavior. During this time any further attempts to write will fail (without erroring the stream).\n       *\n       * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream\n       * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with\n       * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.\n       */\n\n    }, {\n      key: \"close\",\n      value: function close() {\n        if (!IsWritableStream(this)) {\n          return promiseRejectedWith(streamBrandCheckException$2('close'));\n        }\n\n        if (IsWritableStreamLocked(this)) {\n          return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));\n        }\n\n        if (WritableStreamCloseQueuedOrInFlight(this)) {\n          return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n        }\n\n        return WritableStreamClose(this);\n      }\n      /**\n       * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream\n       * is locked, no other writer can be acquired until this one is released.\n       *\n       * This functionality is especially useful for creating abstractions that desire the ability to write to a stream\n       * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at\n       * the same time, which would cause the resulting written data to be unpredictable and probably useless.\n       */\n\n    }, {\n      key: \"getWriter\",\n      value: function getWriter() {\n        if (!IsWritableStream(this)) {\n          throw streamBrandCheckException$2('getWriter');\n        }\n\n        return AcquireWritableStreamDefaultWriter(this);\n      }\n    }]);\n\n    return WritableStream;\n  }();\n\n  Object.defineProperties(WritableStream.prototype, {\n    abort: {\n      enumerable: true\n    },\n    close: {\n      enumerable: true\n    },\n    getWriter: {\n      enumerable: true\n    },\n    locked: {\n      enumerable: true\n    }\n  });\n\n  if (_typeof(SymbolPolyfill.toStringTag) === 'symbol') {\n    Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStream',\n      configurable: true\n    });\n  } // Abstract operations for the WritableStream.\n\n\n  function AcquireWritableStreamDefaultWriter(stream) {\n    return new WritableStreamDefaultWriter(stream);\n  } // Throws if and only if startAlgorithm throws.\n\n\n  function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm) {\n    var highWaterMark = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n    var sizeAlgorithm = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {\n      return 1;\n    };\n    var stream = Object.create(WritableStream.prototype);\n    InitializeWritableStream(stream);\n    var controller = Object.create(WritableStreamDefaultController.prototype);\n    SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n    return stream;\n  }\n\n  function InitializeWritableStream(stream) {\n    stream._state = 'writable'; // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is\n    // 'erroring' or 'errored'. May be set to an undefined value.\n\n    stream._storedError = undefined;\n    stream._writer = undefined; // Initialize to undefined first because the constructor of the controller checks this\n    // variable to validate the caller.\n\n    stream._writableStreamController = undefined; // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data\n    // producer without waiting for the queued writes to finish.\n\n    stream._writeRequests = new SimpleQueue(); // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents\n    // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.\n\n    stream._inFlightWriteRequest = undefined; // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer\n    // has been detached.\n\n    stream._closeRequest = undefined; // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it\n    // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.\n\n    stream._inFlightCloseRequest = undefined; // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.\n\n    stream._pendingAbortRequest = undefined; // The backpressure signal set by the controller.\n\n    stream._backpressure = false;\n  }\n\n  function IsWritableStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {\n      return false;\n    }\n\n    return x instanceof WritableStream;\n  }\n\n  function IsWritableStreamLocked(stream) {\n    if (stream._writer === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function WritableStreamAbort(stream, reason) {\n    var _a;\n\n    if (stream._state === 'closed' || stream._state === 'errored') {\n      return promiseResolvedWith(undefined);\n    }\n\n    stream._writableStreamController._abortReason = reason;\n    (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort(); // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',\n    // but it doesn't know that signaling abort runs author code that might have changed the state.\n    // Widen the type again by casting to WritableStreamState.\n\n    var state = stream._state;\n\n    if (state === 'closed' || state === 'errored') {\n      return promiseResolvedWith(undefined);\n    }\n\n    if (stream._pendingAbortRequest !== undefined) {\n      return stream._pendingAbortRequest._promise;\n    }\n\n    var wasAlreadyErroring = false;\n\n    if (state === 'erroring') {\n      wasAlreadyErroring = true; // reason will not be used, so don't keep a reference to it.\n\n      reason = undefined;\n    }\n\n    var promise = newPromise(function (resolve, reject) {\n      stream._pendingAbortRequest = {\n        _promise: undefined,\n        _resolve: resolve,\n        _reject: reject,\n        _reason: reason,\n        _wasAlreadyErroring: wasAlreadyErroring\n      };\n    });\n    stream._pendingAbortRequest._promise = promise;\n\n    if (!wasAlreadyErroring) {\n      WritableStreamStartErroring(stream, reason);\n    }\n\n    return promise;\n  }\n\n  function WritableStreamClose(stream) {\n    var state = stream._state;\n\n    if (state === 'closed' || state === 'errored') {\n      return promiseRejectedWith(new TypeError(\"The stream (in \".concat(state, \" state) is not in the writable state and cannot be closed\")));\n    }\n\n    var promise = newPromise(function (resolve, reject) {\n      var closeRequest = {\n        _resolve: resolve,\n        _reject: reject\n      };\n      stream._closeRequest = closeRequest;\n    });\n    var writer = stream._writer;\n\n    if (writer !== undefined && stream._backpressure && state === 'writable') {\n      defaultWriterReadyPromiseResolve(writer);\n    }\n\n    WritableStreamDefaultControllerClose(stream._writableStreamController);\n    return promise;\n  } // WritableStream API exposed for controllers.\n\n\n  function WritableStreamAddWriteRequest(stream) {\n    var promise = newPromise(function (resolve, reject) {\n      var writeRequest = {\n        _resolve: resolve,\n        _reject: reject\n      };\n\n      stream._writeRequests.push(writeRequest);\n    });\n    return promise;\n  }\n\n  function WritableStreamDealWithRejection(stream, error) {\n    var state = stream._state;\n\n    if (state === 'writable') {\n      WritableStreamStartErroring(stream, error);\n      return;\n    }\n\n    WritableStreamFinishErroring(stream);\n  }\n\n  function WritableStreamStartErroring(stream, reason) {\n    var controller = stream._writableStreamController;\n    stream._state = 'erroring';\n    stream._storedError = reason;\n    var writer = stream._writer;\n\n    if (writer !== undefined) {\n      WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);\n    }\n\n    if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {\n      WritableStreamFinishErroring(stream);\n    }\n  }\n\n  function WritableStreamFinishErroring(stream) {\n    stream._state = 'errored';\n\n    stream._writableStreamController[ErrorSteps]();\n\n    var storedError = stream._storedError;\n\n    stream._writeRequests.forEach(function (writeRequest) {\n      writeRequest._reject(storedError);\n    });\n\n    stream._writeRequests = new SimpleQueue();\n\n    if (stream._pendingAbortRequest === undefined) {\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      return;\n    }\n\n    var abortRequest = stream._pendingAbortRequest;\n    stream._pendingAbortRequest = undefined;\n\n    if (abortRequest._wasAlreadyErroring) {\n      abortRequest._reject(storedError);\n\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n      return;\n    }\n\n    var promise = stream._writableStreamController[AbortSteps](abortRequest._reason);\n\n    uponPromise(promise, function () {\n      abortRequest._resolve();\n\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    }, function (reason) {\n      abortRequest._reject(reason);\n\n      WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);\n    });\n  }\n\n  function WritableStreamFinishInFlightWrite(stream) {\n    stream._inFlightWriteRequest._resolve(undefined);\n\n    stream._inFlightWriteRequest = undefined;\n  }\n\n  function WritableStreamFinishInFlightWriteWithError(stream, error) {\n    stream._inFlightWriteRequest._reject(error);\n\n    stream._inFlightWriteRequest = undefined;\n    WritableStreamDealWithRejection(stream, error);\n  }\n\n  function WritableStreamFinishInFlightClose(stream) {\n    stream._inFlightCloseRequest._resolve(undefined);\n\n    stream._inFlightCloseRequest = undefined;\n    var state = stream._state;\n\n    if (state === 'erroring') {\n      // The error was too late to do anything, so it is ignored.\n      stream._storedError = undefined;\n\n      if (stream._pendingAbortRequest !== undefined) {\n        stream._pendingAbortRequest._resolve();\n\n        stream._pendingAbortRequest = undefined;\n      }\n    }\n\n    stream._state = 'closed';\n    var writer = stream._writer;\n\n    if (writer !== undefined) {\n      defaultWriterClosedPromiseResolve(writer);\n    }\n  }\n\n  function WritableStreamFinishInFlightCloseWithError(stream, error) {\n    stream._inFlightCloseRequest._reject(error);\n\n    stream._inFlightCloseRequest = undefined; // Never execute sink abort() after sink close().\n\n    if (stream._pendingAbortRequest !== undefined) {\n      stream._pendingAbortRequest._reject(error);\n\n      stream._pendingAbortRequest = undefined;\n    }\n\n    WritableStreamDealWithRejection(stream, error);\n  } // TODO(ricea): Fix alphabetical order.\n\n\n  function WritableStreamCloseQueuedOrInFlight(stream) {\n    if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function WritableStreamHasOperationMarkedInFlight(stream) {\n    if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function WritableStreamMarkCloseRequestInFlight(stream) {\n    stream._inFlightCloseRequest = stream._closeRequest;\n    stream._closeRequest = undefined;\n  }\n\n  function WritableStreamMarkFirstWriteRequestInFlight(stream) {\n    stream._inFlightWriteRequest = stream._writeRequests.shift();\n  }\n\n  function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {\n    if (stream._closeRequest !== undefined) {\n      stream._closeRequest._reject(stream._storedError);\n\n      stream._closeRequest = undefined;\n    }\n\n    var writer = stream._writer;\n\n    if (writer !== undefined) {\n      defaultWriterClosedPromiseReject(writer, stream._storedError);\n    }\n  }\n\n  function WritableStreamUpdateBackpressure(stream, backpressure) {\n    var writer = stream._writer;\n\n    if (writer !== undefined && backpressure !== stream._backpressure) {\n      if (backpressure) {\n        defaultWriterReadyPromiseReset(writer);\n      } else {\n        defaultWriterReadyPromiseResolve(writer);\n      }\n    }\n\n    stream._backpressure = backpressure;\n  }\n  /**\n   * A default writer vended by a {@link WritableStream}.\n   *\n   * @public\n   */\n\n\n  var WritableStreamDefaultWriter = /*#__PURE__*/function () {\n    function WritableStreamDefaultWriter(stream) {\n      _classCallCheck(this, WritableStreamDefaultWriter);\n\n      assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');\n      assertWritableStream(stream, 'First parameter');\n\n      if (IsWritableStreamLocked(stream)) {\n        throw new TypeError('This stream has already been locked for exclusive writing by another writer');\n      }\n\n      this._ownerWritableStream = stream;\n      stream._writer = this;\n      var state = stream._state;\n\n      if (state === 'writable') {\n        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {\n          defaultWriterReadyPromiseInitialize(this);\n        } else {\n          defaultWriterReadyPromiseInitializeAsResolved(this);\n        }\n\n        defaultWriterClosedPromiseInitialize(this);\n      } else if (state === 'erroring') {\n        defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);\n        defaultWriterClosedPromiseInitialize(this);\n      } else if (state === 'closed') {\n        defaultWriterReadyPromiseInitializeAsResolved(this);\n        defaultWriterClosedPromiseInitializeAsResolved(this);\n      } else {\n        var storedError = stream._storedError;\n        defaultWriterReadyPromiseInitializeAsRejected(this, storedError);\n        defaultWriterClosedPromiseInitializeAsRejected(this, storedError);\n      }\n    }\n    /**\n     * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or\n     * the writer’s lock is released before the stream finishes closing.\n     */\n\n\n    _createClass(WritableStreamDefaultWriter, [{\n      key: \"closed\",\n      get: function get() {\n        if (!IsWritableStreamDefaultWriter(this)) {\n          return promiseRejectedWith(defaultWriterBrandCheckException('closed'));\n        }\n\n        return this._closedPromise;\n      }\n      /**\n       * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.\n       * A producer can use this information to determine the right amount of data to write.\n       *\n       * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort\n       * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when\n       * the writer’s lock is released.\n       */\n\n    }, {\n      key: \"desiredSize\",\n      get: function get() {\n        if (!IsWritableStreamDefaultWriter(this)) {\n          throw defaultWriterBrandCheckException('desiredSize');\n        }\n\n        if (this._ownerWritableStream === undefined) {\n          throw defaultWriterLockException('desiredSize');\n        }\n\n        return WritableStreamDefaultWriterGetDesiredSize(this);\n      }\n      /**\n       * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions\n       * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips\n       * back to zero or below, the getter will return a new promise that stays pending until the next transition.\n       *\n       * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become\n       * rejected.\n       */\n\n    }, {\n      key: \"ready\",\n      get: function get() {\n        if (!IsWritableStreamDefaultWriter(this)) {\n          return promiseRejectedWith(defaultWriterBrandCheckException('ready'));\n        }\n\n        return this._readyPromise;\n      }\n      /**\n       * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.\n       */\n\n    }, {\n      key: \"abort\",\n      value: function abort() {\n        var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!IsWritableStreamDefaultWriter(this)) {\n          return promiseRejectedWith(defaultWriterBrandCheckException('abort'));\n        }\n\n        if (this._ownerWritableStream === undefined) {\n          return promiseRejectedWith(defaultWriterLockException('abort'));\n        }\n\n        return WritableStreamDefaultWriterAbort(this, reason);\n      }\n      /**\n       * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.\n       */\n\n    }, {\n      key: \"close\",\n      value: function close() {\n        if (!IsWritableStreamDefaultWriter(this)) {\n          return promiseRejectedWith(defaultWriterBrandCheckException('close'));\n        }\n\n        var stream = this._ownerWritableStream;\n\n        if (stream === undefined) {\n          return promiseRejectedWith(defaultWriterLockException('close'));\n        }\n\n        if (WritableStreamCloseQueuedOrInFlight(stream)) {\n          return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));\n        }\n\n        return WritableStreamDefaultWriterClose(this);\n      }\n      /**\n       * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.\n       * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from\n       * now on; otherwise, the writer will appear closed.\n       *\n       * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the\n       * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).\n       * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents\n       * other producers from writing in an interleaved manner.\n       */\n\n    }, {\n      key: \"releaseLock\",\n      value: function releaseLock() {\n        if (!IsWritableStreamDefaultWriter(this)) {\n          throw defaultWriterBrandCheckException('releaseLock');\n        }\n\n        var stream = this._ownerWritableStream;\n\n        if (stream === undefined) {\n          return;\n        }\n\n        WritableStreamDefaultWriterRelease(this);\n      }\n    }, {\n      key: \"write\",\n      value: function write() {\n        var chunk = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!IsWritableStreamDefaultWriter(this)) {\n          return promiseRejectedWith(defaultWriterBrandCheckException('write'));\n        }\n\n        if (this._ownerWritableStream === undefined) {\n          return promiseRejectedWith(defaultWriterLockException('write to'));\n        }\n\n        return WritableStreamDefaultWriterWrite(this, chunk);\n      }\n    }]);\n\n    return WritableStreamDefaultWriter;\n  }();\n\n  Object.defineProperties(WritableStreamDefaultWriter.prototype, {\n    abort: {\n      enumerable: true\n    },\n    close: {\n      enumerable: true\n    },\n    releaseLock: {\n      enumerable: true\n    },\n    write: {\n      enumerable: true\n    },\n    closed: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    },\n    ready: {\n      enumerable: true\n    }\n  });\n\n  if (_typeof(SymbolPolyfill.toStringTag) === 'symbol') {\n    Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStreamDefaultWriter',\n      configurable: true\n    });\n  } // Abstract operations for the WritableStreamDefaultWriter.\n\n\n  function IsWritableStreamDefaultWriter(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {\n      return false;\n    }\n\n    return x instanceof WritableStreamDefaultWriter;\n  } // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.\n\n\n  function WritableStreamDefaultWriterAbort(writer, reason) {\n    var stream = writer._ownerWritableStream;\n    return WritableStreamAbort(stream, reason);\n  }\n\n  function WritableStreamDefaultWriterClose(writer) {\n    var stream = writer._ownerWritableStream;\n    return WritableStreamClose(stream);\n  }\n\n  function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {\n    var stream = writer._ownerWritableStream;\n    var state = stream._state;\n\n    if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n      return promiseResolvedWith(undefined);\n    }\n\n    if (state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n\n    return WritableStreamDefaultWriterClose(writer);\n  }\n\n  function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {\n    if (writer._closedPromiseState === 'pending') {\n      defaultWriterClosedPromiseReject(writer, error);\n    } else {\n      defaultWriterClosedPromiseResetToRejected(writer, error);\n    }\n  }\n\n  function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {\n    if (writer._readyPromiseState === 'pending') {\n      defaultWriterReadyPromiseReject(writer, error);\n    } else {\n      defaultWriterReadyPromiseResetToRejected(writer, error);\n    }\n  }\n\n  function WritableStreamDefaultWriterGetDesiredSize(writer) {\n    var stream = writer._ownerWritableStream;\n    var state = stream._state;\n\n    if (state === 'errored' || state === 'erroring') {\n      return null;\n    }\n\n    if (state === 'closed') {\n      return 0;\n    }\n\n    return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);\n  }\n\n  function WritableStreamDefaultWriterRelease(writer) {\n    var stream = writer._ownerWritableStream;\n    var releasedError = new TypeError(\"Writer was released and can no longer be used to monitor the stream's closedness\");\n    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError); // The state transitions to \"errored\" before the sink abort() method runs, but the writer.closed promise is not\n    // rejected until afterwards. This means that simply testing state will not work.\n\n    WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);\n    stream._writer = undefined;\n    writer._ownerWritableStream = undefined;\n  }\n\n  function WritableStreamDefaultWriterWrite(writer, chunk) {\n    var stream = writer._ownerWritableStream;\n    var controller = stream._writableStreamController;\n    var chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);\n\n    if (stream !== writer._ownerWritableStream) {\n      return promiseRejectedWith(defaultWriterLockException('write to'));\n    }\n\n    var state = stream._state;\n\n    if (state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n\n    if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {\n      return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));\n    }\n\n    if (state === 'erroring') {\n      return promiseRejectedWith(stream._storedError);\n    }\n\n    var promise = WritableStreamAddWriteRequest(stream);\n    WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);\n    return promise;\n  }\n\n  var closeSentinel = {};\n  /**\n   * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.\n   *\n   * @public\n   */\n\n  var WritableStreamDefaultController = /*#__PURE__*/function () {\n    function WritableStreamDefaultController() {\n      _classCallCheck(this, WritableStreamDefaultController);\n\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.\n     */\n\n\n    _createClass(WritableStreamDefaultController, [{\n      key: \"abortReason\",\n      get: function get() {\n        if (!IsWritableStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException$2('abortReason');\n        }\n\n        return this._abortReason;\n      }\n      /**\n       * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.\n       */\n\n    }, {\n      key: \"signal\",\n      get: function get() {\n        if (!IsWritableStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException$2('signal');\n        }\n\n        if (this._abortController === undefined) {\n          // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.\n          // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,\n          // so instead we only implement support for `signal` if we find a global `AbortController` constructor.\n          throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');\n        }\n\n        return this._abortController.signal;\n      }\n      /**\n       * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.\n       *\n       * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying\n       * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the\n       * normal lifecycle of interactions with the underlying sink.\n       */\n\n    }, {\n      key: \"error\",\n      value: function error() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!IsWritableStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException$2('error');\n        }\n\n        var state = this._controlledWritableStream._state;\n\n        if (state !== 'writable') {\n          // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so\n          // just treat it as a no-op.\n          return;\n        }\n\n        WritableStreamDefaultControllerError(this, e);\n      }\n      /** @internal */\n\n    }, {\n      key: AbortSteps,\n      value: function value(reason) {\n        var result = this._abortAlgorithm(reason);\n\n        WritableStreamDefaultControllerClearAlgorithms(this);\n        return result;\n      }\n      /** @internal */\n\n    }, {\n      key: ErrorSteps,\n      value: function value() {\n        ResetQueue(this);\n      }\n    }]);\n\n    return WritableStreamDefaultController;\n  }();\n\n  Object.defineProperties(WritableStreamDefaultController.prototype, {\n    error: {\n      enumerable: true\n    }\n  });\n\n  if (_typeof(SymbolPolyfill.toStringTag) === 'symbol') {\n    Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'WritableStreamDefaultController',\n      configurable: true\n    });\n  } // Abstract operations implementing interface required by the WritableStream.\n\n\n  function IsWritableStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {\n      return false;\n    }\n\n    return x instanceof WritableStreamDefaultController;\n  }\n\n  function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {\n    controller._controlledWritableStream = stream;\n    stream._writableStreamController = controller; // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.\n\n    controller._queue = undefined;\n    controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._abortReason = undefined;\n    controller._abortController = createAbortController();\n    controller._started = false;\n    controller._strategySizeAlgorithm = sizeAlgorithm;\n    controller._strategyHWM = highWaterMark;\n    controller._writeAlgorithm = writeAlgorithm;\n    controller._closeAlgorithm = closeAlgorithm;\n    controller._abortAlgorithm = abortAlgorithm;\n    var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n    WritableStreamUpdateBackpressure(stream, backpressure);\n    var startResult = startAlgorithm();\n    var startPromise = promiseResolvedWith(startResult);\n    uponPromise(startPromise, function () {\n      controller._started = true;\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }, function (r) {\n      controller._started = true;\n      WritableStreamDealWithRejection(stream, r);\n    });\n  }\n\n  function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {\n    var controller = Object.create(WritableStreamDefaultController.prototype);\n\n    var startAlgorithm = function startAlgorithm() {\n      return undefined;\n    };\n\n    var writeAlgorithm = function writeAlgorithm() {\n      return promiseResolvedWith(undefined);\n    };\n\n    var closeAlgorithm = function closeAlgorithm() {\n      return promiseResolvedWith(undefined);\n    };\n\n    var abortAlgorithm = function abortAlgorithm() {\n      return promiseResolvedWith(undefined);\n    };\n\n    if (underlyingSink.start !== undefined) {\n      startAlgorithm = function startAlgorithm() {\n        return underlyingSink.start(controller);\n      };\n    }\n\n    if (underlyingSink.write !== undefined) {\n      writeAlgorithm = function writeAlgorithm(chunk) {\n        return underlyingSink.write(chunk, controller);\n      };\n    }\n\n    if (underlyingSink.close !== undefined) {\n      closeAlgorithm = function closeAlgorithm() {\n        return underlyingSink.close();\n      };\n    }\n\n    if (underlyingSink.abort !== undefined) {\n      abortAlgorithm = function abortAlgorithm(reason) {\n        return underlyingSink.abort(reason);\n      };\n    }\n\n    SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);\n  } // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.\n\n\n  function WritableStreamDefaultControllerClearAlgorithms(controller) {\n    controller._writeAlgorithm = undefined;\n    controller._closeAlgorithm = undefined;\n    controller._abortAlgorithm = undefined;\n    controller._strategySizeAlgorithm = undefined;\n  }\n\n  function WritableStreamDefaultControllerClose(controller) {\n    EnqueueValueWithSize(controller, closeSentinel, 0);\n    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n  }\n\n  function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {\n    try {\n      return controller._strategySizeAlgorithm(chunk);\n    } catch (chunkSizeE) {\n      WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);\n      return 1;\n    }\n  }\n\n  function WritableStreamDefaultControllerGetDesiredSize(controller) {\n    return controller._strategyHWM - controller._queueTotalSize;\n  }\n\n  function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {\n    try {\n      EnqueueValueWithSize(controller, chunk, chunkSize);\n    } catch (enqueueE) {\n      WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);\n      return;\n    }\n\n    var stream = controller._controlledWritableStream;\n\n    if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {\n      var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n      WritableStreamUpdateBackpressure(stream, backpressure);\n    }\n\n    WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n  } // Abstract operations for the WritableStreamDefaultController.\n\n\n  function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {\n    var stream = controller._controlledWritableStream;\n\n    if (!controller._started) {\n      return;\n    }\n\n    if (stream._inFlightWriteRequest !== undefined) {\n      return;\n    }\n\n    var state = stream._state;\n\n    if (state === 'erroring') {\n      WritableStreamFinishErroring(stream);\n      return;\n    }\n\n    if (controller._queue.length === 0) {\n      return;\n    }\n\n    var value = PeekQueueValue(controller);\n\n    if (value === closeSentinel) {\n      WritableStreamDefaultControllerProcessClose(controller);\n    } else {\n      WritableStreamDefaultControllerProcessWrite(controller, value);\n    }\n  }\n\n  function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {\n    if (controller._controlledWritableStream._state === 'writable') {\n      WritableStreamDefaultControllerError(controller, error);\n    }\n  }\n\n  function WritableStreamDefaultControllerProcessClose(controller) {\n    var stream = controller._controlledWritableStream;\n    WritableStreamMarkCloseRequestInFlight(stream);\n    DequeueValue(controller);\n\n    var sinkClosePromise = controller._closeAlgorithm();\n\n    WritableStreamDefaultControllerClearAlgorithms(controller);\n    uponPromise(sinkClosePromise, function () {\n      WritableStreamFinishInFlightClose(stream);\n    }, function (reason) {\n      WritableStreamFinishInFlightCloseWithError(stream, reason);\n    });\n  }\n\n  function WritableStreamDefaultControllerProcessWrite(controller, chunk) {\n    var stream = controller._controlledWritableStream;\n    WritableStreamMarkFirstWriteRequestInFlight(stream);\n\n    var sinkWritePromise = controller._writeAlgorithm(chunk);\n\n    uponPromise(sinkWritePromise, function () {\n      WritableStreamFinishInFlightWrite(stream);\n      var state = stream._state;\n      DequeueValue(controller);\n\n      if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {\n        var backpressure = WritableStreamDefaultControllerGetBackpressure(controller);\n        WritableStreamUpdateBackpressure(stream, backpressure);\n      }\n\n      WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);\n    }, function (reason) {\n      if (stream._state === 'writable') {\n        WritableStreamDefaultControllerClearAlgorithms(controller);\n      }\n\n      WritableStreamFinishInFlightWriteWithError(stream, reason);\n    });\n  }\n\n  function WritableStreamDefaultControllerGetBackpressure(controller) {\n    var desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);\n    return desiredSize <= 0;\n  } // A client of WritableStreamDefaultController may use these functions directly to bypass state check.\n\n\n  function WritableStreamDefaultControllerError(controller, error) {\n    var stream = controller._controlledWritableStream;\n    WritableStreamDefaultControllerClearAlgorithms(controller);\n    WritableStreamStartErroring(stream, error);\n  } // Helper functions for the WritableStream.\n\n\n  function streamBrandCheckException$2(name) {\n    return new TypeError(\"WritableStream.prototype.\".concat(name, \" can only be used on a WritableStream\"));\n  } // Helper functions for the WritableStreamDefaultController.\n\n\n  function defaultControllerBrandCheckException$2(name) {\n    return new TypeError(\"WritableStreamDefaultController.prototype.\".concat(name, \" can only be used on a WritableStreamDefaultController\"));\n  } // Helper functions for the WritableStreamDefaultWriter.\n\n\n  function defaultWriterBrandCheckException(name) {\n    return new TypeError(\"WritableStreamDefaultWriter.prototype.\".concat(name, \" can only be used on a WritableStreamDefaultWriter\"));\n  }\n\n  function defaultWriterLockException(name) {\n    return new TypeError('Cannot ' + name + ' a stream using a released writer');\n  }\n\n  function defaultWriterClosedPromiseInitialize(writer) {\n    writer._closedPromise = newPromise(function (resolve, reject) {\n      writer._closedPromise_resolve = resolve;\n      writer._closedPromise_reject = reject;\n      writer._closedPromiseState = 'pending';\n    });\n  }\n\n  function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {\n    defaultWriterClosedPromiseInitialize(writer);\n    defaultWriterClosedPromiseReject(writer, reason);\n  }\n\n  function defaultWriterClosedPromiseInitializeAsResolved(writer) {\n    defaultWriterClosedPromiseInitialize(writer);\n    defaultWriterClosedPromiseResolve(writer);\n  }\n\n  function defaultWriterClosedPromiseReject(writer, reason) {\n    if (writer._closedPromise_reject === undefined) {\n      return;\n    }\n\n    setPromiseIsHandledToTrue(writer._closedPromise);\n\n    writer._closedPromise_reject(reason);\n\n    writer._closedPromise_resolve = undefined;\n    writer._closedPromise_reject = undefined;\n    writer._closedPromiseState = 'rejected';\n  }\n\n  function defaultWriterClosedPromiseResetToRejected(writer, reason) {\n    defaultWriterClosedPromiseInitializeAsRejected(writer, reason);\n  }\n\n  function defaultWriterClosedPromiseResolve(writer) {\n    if (writer._closedPromise_resolve === undefined) {\n      return;\n    }\n\n    writer._closedPromise_resolve(undefined);\n\n    writer._closedPromise_resolve = undefined;\n    writer._closedPromise_reject = undefined;\n    writer._closedPromiseState = 'resolved';\n  }\n\n  function defaultWriterReadyPromiseInitialize(writer) {\n    writer._readyPromise = newPromise(function (resolve, reject) {\n      writer._readyPromise_resolve = resolve;\n      writer._readyPromise_reject = reject;\n    });\n    writer._readyPromiseState = 'pending';\n  }\n\n  function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {\n    defaultWriterReadyPromiseInitialize(writer);\n    defaultWriterReadyPromiseReject(writer, reason);\n  }\n\n  function defaultWriterReadyPromiseInitializeAsResolved(writer) {\n    defaultWriterReadyPromiseInitialize(writer);\n    defaultWriterReadyPromiseResolve(writer);\n  }\n\n  function defaultWriterReadyPromiseReject(writer, reason) {\n    if (writer._readyPromise_reject === undefined) {\n      return;\n    }\n\n    setPromiseIsHandledToTrue(writer._readyPromise);\n\n    writer._readyPromise_reject(reason);\n\n    writer._readyPromise_resolve = undefined;\n    writer._readyPromise_reject = undefined;\n    writer._readyPromiseState = 'rejected';\n  }\n\n  function defaultWriterReadyPromiseReset(writer) {\n    defaultWriterReadyPromiseInitialize(writer);\n  }\n\n  function defaultWriterReadyPromiseResetToRejected(writer, reason) {\n    defaultWriterReadyPromiseInitializeAsRejected(writer, reason);\n  }\n\n  function defaultWriterReadyPromiseResolve(writer) {\n    if (writer._readyPromise_resolve === undefined) {\n      return;\n    }\n\n    writer._readyPromise_resolve(undefined);\n\n    writer._readyPromise_resolve = undefined;\n    writer._readyPromise_reject = undefined;\n    writer._readyPromiseState = 'fulfilled';\n  } /// <reference lib=\"dom\" />\n\n\n  var NativeDOMException = typeof DOMException !== 'undefined' ? DOMException : undefined; /// <reference types=\"node\" />\n\n  function isDOMExceptionConstructor(ctor) {\n    if (!(typeof ctor === 'function' || _typeof(ctor) === 'object')) {\n      return false;\n    }\n\n    try {\n      new ctor();\n      return true;\n    } catch (_a) {\n      return false;\n    }\n  }\n\n  function createDOMExceptionPolyfill() {\n    // eslint-disable-next-line no-shadow\n    var ctor = function DOMException(message, name) {\n      this.message = message || '';\n      this.name = name || 'Error';\n\n      if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor);\n      }\n    };\n\n    ctor.prototype = Object.create(Error.prototype);\n    Object.defineProperty(ctor.prototype, 'constructor', {\n      value: ctor,\n      writable: true,\n      configurable: true\n    });\n    return ctor;\n  } // eslint-disable-next-line no-redeclare\n\n\n  var DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();\n\n  function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {\n    var reader = AcquireReadableStreamDefaultReader(source);\n    var writer = AcquireWritableStreamDefaultWriter(dest);\n    source._disturbed = true;\n    var shuttingDown = false; // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.\n\n    var currentWrite = promiseResolvedWith(undefined);\n    return newPromise(function (resolve, reject) {\n      var abortAlgorithm;\n\n      if (signal !== undefined) {\n        abortAlgorithm = function abortAlgorithm() {\n          var error = new DOMException$1('Aborted', 'AbortError');\n          var actions = [];\n\n          if (!preventAbort) {\n            actions.push(function () {\n              if (dest._state === 'writable') {\n                return WritableStreamAbort(dest, error);\n              }\n\n              return promiseResolvedWith(undefined);\n            });\n          }\n\n          if (!preventCancel) {\n            actions.push(function () {\n              if (source._state === 'readable') {\n                return ReadableStreamCancel(source, error);\n              }\n\n              return promiseResolvedWith(undefined);\n            });\n          }\n\n          shutdownWithAction(function () {\n            return Promise.all(actions.map(function (action) {\n              return action();\n            }));\n          }, true, error);\n        };\n\n        if (signal.aborted) {\n          abortAlgorithm();\n          return;\n        }\n\n        signal.addEventListener('abort', abortAlgorithm);\n      } // Using reader and writer, read all chunks from this and write them to dest\n      // - Backpressure must be enforced\n      // - Shutdown must stop all activity\n\n\n      function pipeLoop() {\n        return newPromise(function (resolveLoop, rejectLoop) {\n          function next(done) {\n            if (done) {\n              resolveLoop();\n            } else {\n              // Use `PerformPromiseThen` instead of `uponPromise` to avoid\n              // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers\n              PerformPromiseThen(pipeStep(), next, rejectLoop);\n            }\n          }\n\n          next(false);\n        });\n      }\n\n      function pipeStep() {\n        if (shuttingDown) {\n          return promiseResolvedWith(true);\n        }\n\n        return PerformPromiseThen(writer._readyPromise, function () {\n          return newPromise(function (resolveRead, rejectRead) {\n            ReadableStreamDefaultReaderRead(reader, {\n              _chunkSteps: function _chunkSteps(chunk) {\n                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);\n                resolveRead(false);\n              },\n              _closeSteps: function _closeSteps() {\n                return resolveRead(true);\n              },\n              _errorSteps: rejectRead\n            });\n          });\n        });\n      } // Errors must be propagated forward\n\n\n      isOrBecomesErrored(source, reader._closedPromise, function (storedError) {\n        if (!preventAbort) {\n          shutdownWithAction(function () {\n            return WritableStreamAbort(dest, storedError);\n          }, true, storedError);\n        } else {\n          shutdown(true, storedError);\n        }\n      }); // Errors must be propagated backward\n\n      isOrBecomesErrored(dest, writer._closedPromise, function (storedError) {\n        if (!preventCancel) {\n          shutdownWithAction(function () {\n            return ReadableStreamCancel(source, storedError);\n          }, true, storedError);\n        } else {\n          shutdown(true, storedError);\n        }\n      }); // Closing must be propagated forward\n\n      isOrBecomesClosed(source, reader._closedPromise, function () {\n        if (!preventClose) {\n          shutdownWithAction(function () {\n            return WritableStreamDefaultWriterCloseWithErrorPropagation(writer);\n          });\n        } else {\n          shutdown();\n        }\n      }); // Closing must be propagated backward\n\n      if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {\n        var destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');\n\n        if (!preventCancel) {\n          shutdownWithAction(function () {\n            return ReadableStreamCancel(source, destClosed);\n          }, true, destClosed);\n        } else {\n          shutdown(true, destClosed);\n        }\n      }\n\n      setPromiseIsHandledToTrue(pipeLoop());\n\n      function waitForWritesToFinish() {\n        // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait\n        // for that too.\n        var oldCurrentWrite = currentWrite;\n        return PerformPromiseThen(currentWrite, function () {\n          return oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined;\n        });\n      }\n\n      function isOrBecomesErrored(stream, promise, action) {\n        if (stream._state === 'errored') {\n          action(stream._storedError);\n        } else {\n          uponRejection(promise, action);\n        }\n      }\n\n      function isOrBecomesClosed(stream, promise, action) {\n        if (stream._state === 'closed') {\n          action();\n        } else {\n          uponFulfillment(promise, action);\n        }\n      }\n\n      function shutdownWithAction(action, originalIsError, originalError) {\n        if (shuttingDown) {\n          return;\n        }\n\n        shuttingDown = true;\n\n        if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n          uponFulfillment(waitForWritesToFinish(), doTheRest);\n        } else {\n          doTheRest();\n        }\n\n        function doTheRest() {\n          uponPromise(action(), function () {\n            return finalize(originalIsError, originalError);\n          }, function (newError) {\n            return finalize(true, newError);\n          });\n        }\n      }\n\n      function shutdown(isError, error) {\n        if (shuttingDown) {\n          return;\n        }\n\n        shuttingDown = true;\n\n        if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {\n          uponFulfillment(waitForWritesToFinish(), function () {\n            return finalize(isError, error);\n          });\n        } else {\n          finalize(isError, error);\n        }\n      }\n\n      function finalize(isError, error) {\n        WritableStreamDefaultWriterRelease(writer);\n        ReadableStreamReaderGenericRelease(reader);\n\n        if (signal !== undefined) {\n          signal.removeEventListener('abort', abortAlgorithm);\n        }\n\n        if (isError) {\n          reject(error);\n        } else {\n          resolve(undefined);\n        }\n      }\n    });\n  }\n  /**\n   * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.\n   *\n   * @public\n   */\n\n\n  var ReadableStreamDefaultController = /*#__PURE__*/function () {\n    function ReadableStreamDefaultController() {\n      _classCallCheck(this, ReadableStreamDefaultController);\n\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is\n     * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.\n     */\n\n\n    _createClass(ReadableStreamDefaultController, [{\n      key: \"desiredSize\",\n      get: function get() {\n        if (!IsReadableStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException$1('desiredSize');\n        }\n\n        return ReadableStreamDefaultControllerGetDesiredSize(this);\n      }\n      /**\n       * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from\n       * the stream, but once those are read, the stream will become closed.\n       */\n\n    }, {\n      key: \"close\",\n      value: function close() {\n        if (!IsReadableStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException$1('close');\n        }\n\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n          throw new TypeError('The stream is not in a state that permits close');\n        }\n\n        ReadableStreamDefaultControllerClose(this);\n      }\n    }, {\n      key: \"enqueue\",\n      value: function enqueue() {\n        var chunk = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!IsReadableStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException$1('enqueue');\n        }\n\n        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {\n          throw new TypeError('The stream is not in a state that permits enqueue');\n        }\n\n        return ReadableStreamDefaultControllerEnqueue(this, chunk);\n      }\n      /**\n       * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.\n       */\n\n    }, {\n      key: \"error\",\n      value: function error() {\n        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!IsReadableStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException$1('error');\n        }\n\n        ReadableStreamDefaultControllerError(this, e);\n      }\n      /** @internal */\n\n    }, {\n      key: CancelSteps,\n      value: function value(reason) {\n        ResetQueue(this);\n\n        var result = this._cancelAlgorithm(reason);\n\n        ReadableStreamDefaultControllerClearAlgorithms(this);\n        return result;\n      }\n      /** @internal */\n\n    }, {\n      key: PullSteps,\n      value: function value(readRequest) {\n        var stream = this._controlledReadableStream;\n\n        if (this._queue.length > 0) {\n          var chunk = DequeueValue(this);\n\n          if (this._closeRequested && this._queue.length === 0) {\n            ReadableStreamDefaultControllerClearAlgorithms(this);\n            ReadableStreamClose(stream);\n          } else {\n            ReadableStreamDefaultControllerCallPullIfNeeded(this);\n          }\n\n          readRequest._chunkSteps(chunk);\n        } else {\n          ReadableStreamAddReadRequest(stream, readRequest);\n          ReadableStreamDefaultControllerCallPullIfNeeded(this);\n        }\n      }\n    }]);\n\n    return ReadableStreamDefaultController;\n  }();\n\n  Object.defineProperties(ReadableStreamDefaultController.prototype, {\n    close: {\n      enumerable: true\n    },\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n\n  if (_typeof(SymbolPolyfill.toStringTag) === 'symbol') {\n    Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStreamDefaultController',\n      configurable: true\n    });\n  } // Abstract operations for the ReadableStreamDefaultController.\n\n\n  function IsReadableStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {\n      return false;\n    }\n\n    return x instanceof ReadableStreamDefaultController;\n  }\n\n  function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {\n    var shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);\n\n    if (!shouldPull) {\n      return;\n    }\n\n    if (controller._pulling) {\n      controller._pullAgain = true;\n      return;\n    }\n\n    controller._pulling = true;\n\n    var pullPromise = controller._pullAlgorithm();\n\n    uponPromise(pullPromise, function () {\n      controller._pulling = false;\n\n      if (controller._pullAgain) {\n        controller._pullAgain = false;\n        ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n      }\n    }, function (e) {\n      ReadableStreamDefaultControllerError(controller, e);\n    });\n  }\n\n  function ReadableStreamDefaultControllerShouldCallPull(controller) {\n    var stream = controller._controlledReadableStream;\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return false;\n    }\n\n    if (!controller._started) {\n      return false;\n    }\n\n    if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      return true;\n    }\n\n    var desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);\n\n    if (desiredSize > 0) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function ReadableStreamDefaultControllerClearAlgorithms(controller) {\n    controller._pullAlgorithm = undefined;\n    controller._cancelAlgorithm = undefined;\n    controller._strategySizeAlgorithm = undefined;\n  } // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.\n\n\n  function ReadableStreamDefaultControllerClose(controller) {\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return;\n    }\n\n    var stream = controller._controlledReadableStream;\n    controller._closeRequested = true;\n\n    if (controller._queue.length === 0) {\n      ReadableStreamDefaultControllerClearAlgorithms(controller);\n      ReadableStreamClose(stream);\n    }\n  }\n\n  function ReadableStreamDefaultControllerEnqueue(controller, chunk) {\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {\n      return;\n    }\n\n    var stream = controller._controlledReadableStream;\n\n    if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {\n      ReadableStreamFulfillReadRequest(stream, chunk, false);\n    } else {\n      var chunkSize;\n\n      try {\n        chunkSize = controller._strategySizeAlgorithm(chunk);\n      } catch (chunkSizeE) {\n        ReadableStreamDefaultControllerError(controller, chunkSizeE);\n        throw chunkSizeE;\n      }\n\n      try {\n        EnqueueValueWithSize(controller, chunk, chunkSize);\n      } catch (enqueueE) {\n        ReadableStreamDefaultControllerError(controller, enqueueE);\n        throw enqueueE;\n      }\n    }\n\n    ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n  }\n\n  function ReadableStreamDefaultControllerError(controller, e) {\n    var stream = controller._controlledReadableStream;\n\n    if (stream._state !== 'readable') {\n      return;\n    }\n\n    ResetQueue(controller);\n    ReadableStreamDefaultControllerClearAlgorithms(controller);\n    ReadableStreamError(stream, e);\n  }\n\n  function ReadableStreamDefaultControllerGetDesiredSize(controller) {\n    var state = controller._controlledReadableStream._state;\n\n    if (state === 'errored') {\n      return null;\n    }\n\n    if (state === 'closed') {\n      return 0;\n    }\n\n    return controller._strategyHWM - controller._queueTotalSize;\n  } // This is used in the implementation of TransformStream.\n\n\n  function ReadableStreamDefaultControllerHasBackpressure(controller) {\n    if (ReadableStreamDefaultControllerShouldCallPull(controller)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {\n    var state = controller._controlledReadableStream._state;\n\n    if (!controller._closeRequested && state === 'readable') {\n      return true;\n    }\n\n    return false;\n  }\n\n  function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {\n    controller._controlledReadableStream = stream;\n    controller._queue = undefined;\n    controller._queueTotalSize = undefined;\n    ResetQueue(controller);\n    controller._started = false;\n    controller._closeRequested = false;\n    controller._pullAgain = false;\n    controller._pulling = false;\n    controller._strategySizeAlgorithm = sizeAlgorithm;\n    controller._strategyHWM = highWaterMark;\n    controller._pullAlgorithm = pullAlgorithm;\n    controller._cancelAlgorithm = cancelAlgorithm;\n    stream._readableStreamController = controller;\n    var startResult = startAlgorithm();\n    uponPromise(promiseResolvedWith(startResult), function () {\n      controller._started = true;\n      ReadableStreamDefaultControllerCallPullIfNeeded(controller);\n    }, function (r) {\n      ReadableStreamDefaultControllerError(controller, r);\n    });\n  }\n\n  function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {\n    var controller = Object.create(ReadableStreamDefaultController.prototype);\n\n    var startAlgorithm = function startAlgorithm() {\n      return undefined;\n    };\n\n    var pullAlgorithm = function pullAlgorithm() {\n      return promiseResolvedWith(undefined);\n    };\n\n    var cancelAlgorithm = function cancelAlgorithm() {\n      return promiseResolvedWith(undefined);\n    };\n\n    if (underlyingSource.start !== undefined) {\n      startAlgorithm = function startAlgorithm() {\n        return underlyingSource.start(controller);\n      };\n    }\n\n    if (underlyingSource.pull !== undefined) {\n      pullAlgorithm = function pullAlgorithm() {\n        return underlyingSource.pull(controller);\n      };\n    }\n\n    if (underlyingSource.cancel !== undefined) {\n      cancelAlgorithm = function cancelAlgorithm(reason) {\n        return underlyingSource.cancel(reason);\n      };\n    }\n\n    SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n  } // Helper functions for the ReadableStreamDefaultController.\n\n\n  function defaultControllerBrandCheckException$1(name) {\n    return new TypeError(\"ReadableStreamDefaultController.prototype.\".concat(name, \" can only be used on a ReadableStreamDefaultController\"));\n  }\n\n  function ReadableStreamTee(stream, cloneForBranch2) {\n    if (IsReadableByteStreamController(stream._readableStreamController)) {\n      return ReadableByteStreamTee(stream);\n    }\n\n    return ReadableStreamDefaultTee(stream);\n  }\n\n  function ReadableStreamDefaultTee(stream, cloneForBranch2) {\n    var reader = AcquireReadableStreamDefaultReader(stream);\n    var reading = false;\n    var canceled1 = false;\n    var canceled2 = false;\n    var reason1;\n    var reason2;\n    var branch1;\n    var branch2;\n    var resolveCancelPromise;\n    var cancelPromise = newPromise(function (resolve) {\n      resolveCancelPromise = resolve;\n    });\n\n    function pullAlgorithm() {\n      if (reading) {\n        return promiseResolvedWith(undefined);\n      }\n\n      reading = true;\n      var readRequest = {\n        _chunkSteps: function _chunkSteps(chunk) {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(function () {\n            reading = false;\n            var chunk1 = chunk;\n            var chunk2 = chunk; // There is no way to access the cloning code right now in the reference implementation.\n            // If we add one then we'll need an implementation for serializable objects.\n            // if (!canceled2 && cloneForBranch2) {\n            //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));\n            // }\n\n            if (!canceled1) {\n              ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);\n            }\n\n            if (!canceled2) {\n              ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);\n            }\n          });\n        },\n        _closeSteps: function _closeSteps() {\n          reading = false;\n\n          if (!canceled1) {\n            ReadableStreamDefaultControllerClose(branch1._readableStreamController);\n          }\n\n          if (!canceled2) {\n            ReadableStreamDefaultControllerClose(branch2._readableStreamController);\n          }\n\n          if (!canceled1 || !canceled2) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: function _errorSteps() {\n          reading = false;\n        }\n      };\n      ReadableStreamDefaultReaderRead(reader, readRequest);\n      return promiseResolvedWith(undefined);\n    }\n\n    function cancel1Algorithm(reason) {\n      canceled1 = true;\n      reason1 = reason;\n\n      if (canceled2) {\n        var compositeReason = CreateArrayFromList([reason1, reason2]);\n        var cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n\n      return cancelPromise;\n    }\n\n    function cancel2Algorithm(reason) {\n      canceled2 = true;\n      reason2 = reason;\n\n      if (canceled1) {\n        var compositeReason = CreateArrayFromList([reason1, reason2]);\n        var cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n\n      return cancelPromise;\n    }\n\n    function startAlgorithm() {// do nothing\n    }\n\n    branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);\n    branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);\n    uponRejection(reader._closedPromise, function (r) {\n      ReadableStreamDefaultControllerError(branch1._readableStreamController, r);\n      ReadableStreamDefaultControllerError(branch2._readableStreamController, r);\n\n      if (!canceled1 || !canceled2) {\n        resolveCancelPromise(undefined);\n      }\n    });\n    return [branch1, branch2];\n  }\n\n  function ReadableByteStreamTee(stream) {\n    var reader = AcquireReadableStreamDefaultReader(stream);\n    var reading = false;\n    var canceled1 = false;\n    var canceled2 = false;\n    var reason1;\n    var reason2;\n    var branch1;\n    var branch2;\n    var resolveCancelPromise;\n    var cancelPromise = newPromise(function (resolve) {\n      resolveCancelPromise = resolve;\n    });\n\n    function forwardReaderError(thisReader) {\n      uponRejection(thisReader._closedPromise, function (r) {\n        if (thisReader !== reader) {\n          return;\n        }\n\n        ReadableByteStreamControllerError(branch1._readableStreamController, r);\n        ReadableByteStreamControllerError(branch2._readableStreamController, r);\n\n        if (!canceled1 || !canceled2) {\n          resolveCancelPromise(undefined);\n        }\n      });\n    }\n\n    function pullWithDefaultReader() {\n      if (IsReadableStreamBYOBReader(reader)) {\n        ReadableStreamReaderGenericRelease(reader);\n        reader = AcquireReadableStreamDefaultReader(stream);\n        forwardReaderError(reader);\n      }\n\n      var readRequest = {\n        _chunkSteps: function _chunkSteps(chunk) {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(function () {\n            reading = false;\n            var chunk1 = chunk;\n            var chunk2 = chunk;\n\n            if (!canceled1 && !canceled2) {\n              try {\n                chunk2 = CloneAsUint8Array(chunk);\n              } catch (cloneE) {\n                ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);\n                ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);\n                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                return;\n              }\n            }\n\n            if (!canceled1) {\n              ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);\n            }\n\n            if (!canceled2) {\n              ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);\n            }\n          });\n        },\n        _closeSteps: function _closeSteps() {\n          reading = false;\n\n          if (!canceled1) {\n            ReadableByteStreamControllerClose(branch1._readableStreamController);\n          }\n\n          if (!canceled2) {\n            ReadableByteStreamControllerClose(branch2._readableStreamController);\n          }\n\n          if (branch1._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);\n          }\n\n          if (branch2._readableStreamController._pendingPullIntos.length > 0) {\n            ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);\n          }\n\n          if (!canceled1 || !canceled2) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: function _errorSteps() {\n          reading = false;\n        }\n      };\n      ReadableStreamDefaultReaderRead(reader, readRequest);\n    }\n\n    function pullWithBYOBReader(view, forBranch2) {\n      if (IsReadableStreamDefaultReader(reader)) {\n        ReadableStreamReaderGenericRelease(reader);\n        reader = AcquireReadableStreamBYOBReader(stream);\n        forwardReaderError(reader);\n      }\n\n      var byobBranch = forBranch2 ? branch2 : branch1;\n      var otherBranch = forBranch2 ? branch1 : branch2;\n      var readIntoRequest = {\n        _chunkSteps: function _chunkSteps(chunk) {\n          // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using\n          // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let\n          // successful synchronously-available reads get ahead of asynchronously-available errors.\n          queueMicrotask(function () {\n            reading = false;\n            var byobCanceled = forBranch2 ? canceled2 : canceled1;\n            var otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n            if (!otherCanceled) {\n              var clonedChunk;\n\n              try {\n                clonedChunk = CloneAsUint8Array(chunk);\n              } catch (cloneE) {\n                ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);\n                ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);\n                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));\n                return;\n              }\n\n              if (!byobCanceled) {\n                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n              }\n\n              ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);\n            } else if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n          });\n        },\n        _closeSteps: function _closeSteps(chunk) {\n          reading = false;\n          var byobCanceled = forBranch2 ? canceled2 : canceled1;\n          var otherCanceled = forBranch2 ? canceled1 : canceled2;\n\n          if (!byobCanceled) {\n            ReadableByteStreamControllerClose(byobBranch._readableStreamController);\n          }\n\n          if (!otherCanceled) {\n            ReadableByteStreamControllerClose(otherBranch._readableStreamController);\n          }\n\n          if (chunk !== undefined) {\n            if (!byobCanceled) {\n              ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);\n            }\n\n            if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {\n              ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);\n            }\n          }\n\n          if (!byobCanceled || !otherCanceled) {\n            resolveCancelPromise(undefined);\n          }\n        },\n        _errorSteps: function _errorSteps() {\n          reading = false;\n        }\n      };\n      ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);\n    }\n\n    function pull1Algorithm() {\n      if (reading) {\n        return promiseResolvedWith(undefined);\n      }\n\n      reading = true;\n      var byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);\n\n      if (byobRequest === null) {\n        pullWithDefaultReader();\n      } else {\n        pullWithBYOBReader(byobRequest._view, false);\n      }\n\n      return promiseResolvedWith(undefined);\n    }\n\n    function pull2Algorithm() {\n      if (reading) {\n        return promiseResolvedWith(undefined);\n      }\n\n      reading = true;\n      var byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);\n\n      if (byobRequest === null) {\n        pullWithDefaultReader();\n      } else {\n        pullWithBYOBReader(byobRequest._view, true);\n      }\n\n      return promiseResolvedWith(undefined);\n    }\n\n    function cancel1Algorithm(reason) {\n      canceled1 = true;\n      reason1 = reason;\n\n      if (canceled2) {\n        var compositeReason = CreateArrayFromList([reason1, reason2]);\n        var cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n\n      return cancelPromise;\n    }\n\n    function cancel2Algorithm(reason) {\n      canceled2 = true;\n      reason2 = reason;\n\n      if (canceled1) {\n        var compositeReason = CreateArrayFromList([reason1, reason2]);\n        var cancelResult = ReadableStreamCancel(stream, compositeReason);\n        resolveCancelPromise(cancelResult);\n      }\n\n      return cancelPromise;\n    }\n\n    function startAlgorithm() {\n      return;\n    }\n\n    branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);\n    branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);\n    forwardReaderError(reader);\n    return [branch1, branch2];\n  }\n\n  function convertUnderlyingDefaultOrByteSource(source, context) {\n    assertDictionary(source, context);\n    var original = source;\n    var autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;\n    var cancel = original === null || original === void 0 ? void 0 : original.cancel;\n    var pull = original === null || original === void 0 ? void 0 : original.pull;\n    var start = original === null || original === void 0 ? void 0 : original.start;\n    var type = original === null || original === void 0 ? void 0 : original.type;\n    return {\n      autoAllocateChunkSize: autoAllocateChunkSize === undefined ? undefined : convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, \"\".concat(context, \" has member 'autoAllocateChunkSize' that\")),\n      cancel: cancel === undefined ? undefined : convertUnderlyingSourceCancelCallback(cancel, original, \"\".concat(context, \" has member 'cancel' that\")),\n      pull: pull === undefined ? undefined : convertUnderlyingSourcePullCallback(pull, original, \"\".concat(context, \" has member 'pull' that\")),\n      start: start === undefined ? undefined : convertUnderlyingSourceStartCallback(start, original, \"\".concat(context, \" has member 'start' that\")),\n      type: type === undefined ? undefined : convertReadableStreamType(type, \"\".concat(context, \" has member 'type' that\"))\n    };\n  }\n\n  function convertUnderlyingSourceCancelCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (reason) {\n      return promiseCall(fn, original, [reason]);\n    };\n  }\n\n  function convertUnderlyingSourcePullCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return promiseCall(fn, original, [controller]);\n    };\n  }\n\n  function convertUnderlyingSourceStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return reflectCall(fn, original, [controller]);\n    };\n  }\n\n  function convertReadableStreamType(type, context) {\n    type = \"\".concat(type);\n\n    if (type !== 'bytes') {\n      throw new TypeError(\"\".concat(context, \" '\").concat(type, \"' is not a valid enumeration value for ReadableStreamType\"));\n    }\n\n    return type;\n  }\n\n  function convertReaderOptions(options, context) {\n    assertDictionary(options, context);\n    var mode = options === null || options === void 0 ? void 0 : options.mode;\n    return {\n      mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, \"\".concat(context, \" has member 'mode' that\"))\n    };\n  }\n\n  function convertReadableStreamReaderMode(mode, context) {\n    mode = \"\".concat(mode);\n\n    if (mode !== 'byob') {\n      throw new TypeError(\"\".concat(context, \" '\").concat(mode, \"' is not a valid enumeration value for ReadableStreamReaderMode\"));\n    }\n\n    return mode;\n  }\n\n  function convertIteratorOptions(options, context) {\n    assertDictionary(options, context);\n    var preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n    return {\n      preventCancel: Boolean(preventCancel)\n    };\n  }\n\n  function convertPipeOptions(options, context) {\n    assertDictionary(options, context);\n    var preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;\n    var preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;\n    var preventClose = options === null || options === void 0 ? void 0 : options.preventClose;\n    var signal = options === null || options === void 0 ? void 0 : options.signal;\n\n    if (signal !== undefined) {\n      assertAbortSignal(signal, \"\".concat(context, \" has member 'signal' that\"));\n    }\n\n    return {\n      preventAbort: Boolean(preventAbort),\n      preventCancel: Boolean(preventCancel),\n      preventClose: Boolean(preventClose),\n      signal: signal\n    };\n  }\n\n  function assertAbortSignal(signal, context) {\n    if (!isAbortSignal(signal)) {\n      throw new TypeError(\"\".concat(context, \" is not an AbortSignal.\"));\n    }\n  }\n\n  function convertReadableWritablePair(pair, context) {\n    assertDictionary(pair, context);\n    var readable = pair === null || pair === void 0 ? void 0 : pair.readable;\n    assertRequiredField(readable, 'readable', 'ReadableWritablePair');\n    assertReadableStream(readable, \"\".concat(context, \" has member 'readable' that\"));\n    var writable = pair === null || pair === void 0 ? void 0 : pair.writable;\n    assertRequiredField(writable, 'writable', 'ReadableWritablePair');\n    assertWritableStream(writable, \"\".concat(context, \" has member 'writable' that\"));\n    return {\n      readable: readable,\n      writable: writable\n    };\n  }\n  /**\n   * A readable stream represents a source of data, from which you can read.\n   *\n   * @public\n   */\n\n\n  var ReadableStream = /*#__PURE__*/function () {\n    function ReadableStream() {\n      var rawUnderlyingSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var rawStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, ReadableStream);\n\n      if (rawUnderlyingSource === undefined) {\n        rawUnderlyingSource = null;\n      } else {\n        assertObject(rawUnderlyingSource, 'First parameter');\n      }\n\n      var strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');\n      var underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');\n      InitializeReadableStream(this);\n\n      if (underlyingSource.type === 'bytes') {\n        if (strategy.size !== undefined) {\n          throw new RangeError('The strategy for a byte stream cannot have a size function');\n        }\n\n        var highWaterMark = ExtractHighWaterMark(strategy, 0);\n        SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);\n      } else {\n        var sizeAlgorithm = ExtractSizeAlgorithm(strategy);\n\n        var _highWaterMark = ExtractHighWaterMark(strategy, 1);\n\n        SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, _highWaterMark, sizeAlgorithm);\n      }\n    }\n    /**\n     * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.\n     */\n\n\n    _createClass(ReadableStream, [{\n      key: \"locked\",\n      get: function get() {\n        if (!IsReadableStream(this)) {\n          throw streamBrandCheckException$1('locked');\n        }\n\n        return IsReadableStreamLocked(this);\n      }\n      /**\n       * Cancels the stream, signaling a loss of interest in the stream by a consumer.\n       *\n       * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}\n       * method, which might or might not use it.\n       */\n\n    }, {\n      key: \"cancel\",\n      value: function cancel() {\n        var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!IsReadableStream(this)) {\n          return promiseRejectedWith(streamBrandCheckException$1('cancel'));\n        }\n\n        if (IsReadableStreamLocked(this)) {\n          return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));\n        }\n\n        return ReadableStreamCancel(this, reason);\n      }\n    }, {\n      key: \"getReader\",\n      value: function getReader() {\n        var rawOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!IsReadableStream(this)) {\n          throw streamBrandCheckException$1('getReader');\n        }\n\n        var options = convertReaderOptions(rawOptions, 'First parameter');\n\n        if (options.mode === undefined) {\n          return AcquireReadableStreamDefaultReader(this);\n        }\n\n        return AcquireReadableStreamBYOBReader(this);\n      }\n    }, {\n      key: \"pipeThrough\",\n      value: function pipeThrough(rawTransform) {\n        var rawOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (!IsReadableStream(this)) {\n          throw streamBrandCheckException$1('pipeThrough');\n        }\n\n        assertRequiredArgument(rawTransform, 1, 'pipeThrough');\n        var transform = convertReadableWritablePair(rawTransform, 'First parameter');\n        var options = convertPipeOptions(rawOptions, 'Second parameter');\n\n        if (IsReadableStreamLocked(this)) {\n          throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');\n        }\n\n        if (IsWritableStreamLocked(transform.writable)) {\n          throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');\n        }\n\n        var promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n        setPromiseIsHandledToTrue(promise);\n        return transform.readable;\n      }\n    }, {\n      key: \"pipeTo\",\n      value: function pipeTo(destination) {\n        var rawOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (!IsReadableStream(this)) {\n          return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));\n        }\n\n        if (destination === undefined) {\n          return promiseRejectedWith(\"Parameter 1 is required in 'pipeTo'.\");\n        }\n\n        if (!IsWritableStream(destination)) {\n          return promiseRejectedWith(new TypeError(\"ReadableStream.prototype.pipeTo's first argument must be a WritableStream\"));\n        }\n\n        var options;\n\n        try {\n          options = convertPipeOptions(rawOptions, 'Second parameter');\n        } catch (e) {\n          return promiseRejectedWith(e);\n        }\n\n        if (IsReadableStreamLocked(this)) {\n          return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));\n        }\n\n        if (IsWritableStreamLocked(destination)) {\n          return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));\n        }\n\n        return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);\n      }\n      /**\n       * Tees this readable stream, returning a two-element array containing the two resulting branches as\n       * new {@link ReadableStream} instances.\n       *\n       * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.\n       * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be\n       * propagated to the stream's underlying source.\n       *\n       * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,\n       * this could allow interference between the two branches.\n       */\n\n    }, {\n      key: \"tee\",\n      value: function tee() {\n        if (!IsReadableStream(this)) {\n          throw streamBrandCheckException$1('tee');\n        }\n\n        var branches = ReadableStreamTee(this);\n        return CreateArrayFromList(branches);\n      }\n    }, {\n      key: \"values\",\n      value: function values() {\n        var rawOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!IsReadableStream(this)) {\n          throw streamBrandCheckException$1('values');\n        }\n\n        var options = convertIteratorOptions(rawOptions, 'First parameter');\n        return AcquireReadableStreamAsyncIterator(this, options.preventCancel);\n      }\n    }]);\n\n    return ReadableStream;\n  }();\n\n  Object.defineProperties(ReadableStream.prototype, {\n    cancel: {\n      enumerable: true\n    },\n    getReader: {\n      enumerable: true\n    },\n    pipeThrough: {\n      enumerable: true\n    },\n    pipeTo: {\n      enumerable: true\n    },\n    tee: {\n      enumerable: true\n    },\n    values: {\n      enumerable: true\n    },\n    locked: {\n      enumerable: true\n    }\n  });\n\n  if (_typeof(SymbolPolyfill.toStringTag) === 'symbol') {\n    Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ReadableStream',\n      configurable: true\n    });\n  }\n\n  if (_typeof(SymbolPolyfill.asyncIterator) === 'symbol') {\n    Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.asyncIterator, {\n      value: ReadableStream.prototype.values,\n      writable: true,\n      configurable: true\n    });\n  } // Abstract operations for the ReadableStream.\n  // Throws if and only if startAlgorithm throws.\n\n\n  function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n    var highWaterMark = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    var sizeAlgorithm = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {\n      return 1;\n    };\n    var stream = Object.create(ReadableStream.prototype);\n    InitializeReadableStream(stream);\n    var controller = Object.create(ReadableStreamDefaultController.prototype);\n    SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);\n    return stream;\n  } // Throws if and only if startAlgorithm throws.\n\n\n  function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {\n    var stream = Object.create(ReadableStream.prototype);\n    InitializeReadableStream(stream);\n    var controller = Object.create(ReadableByteStreamController.prototype);\n    SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);\n    return stream;\n  }\n\n  function InitializeReadableStream(stream) {\n    stream._state = 'readable';\n    stream._reader = undefined;\n    stream._storedError = undefined;\n    stream._disturbed = false;\n  }\n\n  function IsReadableStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {\n      return false;\n    }\n\n    return x instanceof ReadableStream;\n  }\n\n  function IsReadableStreamLocked(stream) {\n    if (stream._reader === undefined) {\n      return false;\n    }\n\n    return true;\n  } // ReadableStream API exposed for controllers.\n\n\n  function ReadableStreamCancel(stream, reason) {\n    stream._disturbed = true;\n\n    if (stream._state === 'closed') {\n      return promiseResolvedWith(undefined);\n    }\n\n    if (stream._state === 'errored') {\n      return promiseRejectedWith(stream._storedError);\n    }\n\n    ReadableStreamClose(stream);\n    var reader = stream._reader;\n\n    if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {\n      reader._readIntoRequests.forEach(function (readIntoRequest) {\n        readIntoRequest._closeSteps(undefined);\n      });\n\n      reader._readIntoRequests = new SimpleQueue();\n    }\n\n    var sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);\n\n    return transformPromiseWith(sourceCancelPromise, noop);\n  }\n\n  function ReadableStreamClose(stream) {\n    stream._state = 'closed';\n    var reader = stream._reader;\n\n    if (reader === undefined) {\n      return;\n    }\n\n    defaultReaderClosedPromiseResolve(reader);\n\n    if (IsReadableStreamDefaultReader(reader)) {\n      reader._readRequests.forEach(function (readRequest) {\n        readRequest._closeSteps();\n      });\n\n      reader._readRequests = new SimpleQueue();\n    }\n  }\n\n  function ReadableStreamError(stream, e) {\n    stream._state = 'errored';\n    stream._storedError = e;\n    var reader = stream._reader;\n\n    if (reader === undefined) {\n      return;\n    }\n\n    defaultReaderClosedPromiseReject(reader, e);\n\n    if (IsReadableStreamDefaultReader(reader)) {\n      reader._readRequests.forEach(function (readRequest) {\n        readRequest._errorSteps(e);\n      });\n\n      reader._readRequests = new SimpleQueue();\n    } else {\n      reader._readIntoRequests.forEach(function (readIntoRequest) {\n        readIntoRequest._errorSteps(e);\n      });\n\n      reader._readIntoRequests = new SimpleQueue();\n    }\n  } // Helper functions for the ReadableStream.\n\n\n  function streamBrandCheckException$1(name) {\n    return new TypeError(\"ReadableStream.prototype.\".concat(name, \" can only be used on a ReadableStream\"));\n  }\n\n  function convertQueuingStrategyInit(init, context) {\n    assertDictionary(init, context);\n    var highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;\n    assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');\n    return {\n      highWaterMark: convertUnrestrictedDouble(highWaterMark)\n    };\n  } // The size function must not have a prototype property nor be a constructor\n\n\n  var byteLengthSizeFunction = function byteLengthSizeFunction(chunk) {\n    return chunk.byteLength;\n  };\n\n  Object.defineProperty(byteLengthSizeFunction, 'name', {\n    value: 'size',\n    configurable: true\n  });\n  /**\n   * A queuing strategy that counts the number of bytes in each chunk.\n   *\n   * @public\n   */\n\n  var ByteLengthQueuingStrategy = /*#__PURE__*/function () {\n    function ByteLengthQueuingStrategy(options) {\n      _classCallCheck(this, ByteLengthQueuingStrategy);\n\n      assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');\n      options = convertQueuingStrategyInit(options, 'First parameter');\n      this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;\n    }\n    /**\n     * Returns the high water mark provided to the constructor.\n     */\n\n\n    _createClass(ByteLengthQueuingStrategy, [{\n      key: \"highWaterMark\",\n      get: function get() {\n        if (!IsByteLengthQueuingStrategy(this)) {\n          throw byteLengthBrandCheckException('highWaterMark');\n        }\n\n        return this._byteLengthQueuingStrategyHighWaterMark;\n      }\n      /**\n       * Measures the size of `chunk` by returning the value of its `byteLength` property.\n       */\n\n    }, {\n      key: \"size\",\n      get: function get() {\n        if (!IsByteLengthQueuingStrategy(this)) {\n          throw byteLengthBrandCheckException('size');\n        }\n\n        return byteLengthSizeFunction;\n      }\n    }]);\n\n    return ByteLengthQueuingStrategy;\n  }();\n\n  Object.defineProperties(ByteLengthQueuingStrategy.prototype, {\n    highWaterMark: {\n      enumerable: true\n    },\n    size: {\n      enumerable: true\n    }\n  });\n\n  if (_typeof(SymbolPolyfill.toStringTag) === 'symbol') {\n    Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n      value: 'ByteLengthQueuingStrategy',\n      configurable: true\n    });\n  } // Helper functions for the ByteLengthQueuingStrategy.\n\n\n  function byteLengthBrandCheckException(name) {\n    return new TypeError(\"ByteLengthQueuingStrategy.prototype.\".concat(name, \" can only be used on a ByteLengthQueuingStrategy\"));\n  }\n\n  function IsByteLengthQueuingStrategy(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {\n      return false;\n    }\n\n    return x instanceof ByteLengthQueuingStrategy;\n  } // The size function must not have a prototype property nor be a constructor\n\n\n  var countSizeFunction = function countSizeFunction() {\n    return 1;\n  };\n\n  Object.defineProperty(countSizeFunction, 'name', {\n    value: 'size',\n    configurable: true\n  });\n  /**\n   * A queuing strategy that counts the number of chunks.\n   *\n   * @public\n   */\n\n  var CountQueuingStrategy = /*#__PURE__*/function () {\n    function CountQueuingStrategy(options) {\n      _classCallCheck(this, CountQueuingStrategy);\n\n      assertRequiredArgument(options, 1, 'CountQueuingStrategy');\n      options = convertQueuingStrategyInit(options, 'First parameter');\n      this._countQueuingStrategyHighWaterMark = options.highWaterMark;\n    }\n    /**\n     * Returns the high water mark provided to the constructor.\n     */\n\n\n    _createClass(CountQueuingStrategy, [{\n      key: \"highWaterMark\",\n      get: function get() {\n        if (!IsCountQueuingStrategy(this)) {\n          throw countBrandCheckException('highWaterMark');\n        }\n\n        return this._countQueuingStrategyHighWaterMark;\n      }\n      /**\n       * Measures the size of `chunk` by always returning 1.\n       * This ensures that the total queue size is a count of the number of chunks in the queue.\n       */\n\n    }, {\n      key: \"size\",\n      get: function get() {\n        if (!IsCountQueuingStrategy(this)) {\n          throw countBrandCheckException('size');\n        }\n\n        return countSizeFunction;\n      }\n    }]);\n\n    return CountQueuingStrategy;\n  }();\n\n  Object.defineProperties(CountQueuingStrategy.prototype, {\n    highWaterMark: {\n      enumerable: true\n    },\n    size: {\n      enumerable: true\n    }\n  });\n\n  if (_typeof(SymbolPolyfill.toStringTag) === 'symbol') {\n    Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {\n      value: 'CountQueuingStrategy',\n      configurable: true\n    });\n  } // Helper functions for the CountQueuingStrategy.\n\n\n  function countBrandCheckException(name) {\n    return new TypeError(\"CountQueuingStrategy.prototype.\".concat(name, \" can only be used on a CountQueuingStrategy\"));\n  }\n\n  function IsCountQueuingStrategy(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {\n      return false;\n    }\n\n    return x instanceof CountQueuingStrategy;\n  }\n\n  function convertTransformer(original, context) {\n    assertDictionary(original, context);\n    var flush = original === null || original === void 0 ? void 0 : original.flush;\n    var readableType = original === null || original === void 0 ? void 0 : original.readableType;\n    var start = original === null || original === void 0 ? void 0 : original.start;\n    var transform = original === null || original === void 0 ? void 0 : original.transform;\n    var writableType = original === null || original === void 0 ? void 0 : original.writableType;\n    return {\n      flush: flush === undefined ? undefined : convertTransformerFlushCallback(flush, original, \"\".concat(context, \" has member 'flush' that\")),\n      readableType: readableType,\n      start: start === undefined ? undefined : convertTransformerStartCallback(start, original, \"\".concat(context, \" has member 'start' that\")),\n      transform: transform === undefined ? undefined : convertTransformerTransformCallback(transform, original, \"\".concat(context, \" has member 'transform' that\")),\n      writableType: writableType\n    };\n  }\n\n  function convertTransformerFlushCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return promiseCall(fn, original, [controller]);\n    };\n  }\n\n  function convertTransformerStartCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (controller) {\n      return reflectCall(fn, original, [controller]);\n    };\n  }\n\n  function convertTransformerTransformCallback(fn, original, context) {\n    assertFunction(fn, context);\n    return function (chunk, controller) {\n      return promiseCall(fn, original, [chunk, controller]);\n    };\n  } // Class TransformStream\n\n  /**\n   * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},\n   * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.\n   * In a manner specific to the transform stream in question, writes to the writable side result in new data being\n   * made available for reading from the readable side.\n   *\n   * @public\n   */\n\n\n  var TransformStream = /*#__PURE__*/function () {\n    function TransformStream() {\n      var rawTransformer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var rawWritableStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var rawReadableStrategy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      _classCallCheck(this, TransformStream);\n\n      if (rawTransformer === undefined) {\n        rawTransformer = null;\n      }\n\n      var writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');\n      var readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');\n      var transformer = convertTransformer(rawTransformer, 'First parameter');\n\n      if (transformer.readableType !== undefined) {\n        throw new RangeError('Invalid readableType specified');\n      }\n\n      if (transformer.writableType !== undefined) {\n        throw new RangeError('Invalid writableType specified');\n      }\n\n      var readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);\n      var readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);\n      var writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);\n      var writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);\n      var startPromise_resolve;\n      var startPromise = newPromise(function (resolve) {\n        startPromise_resolve = resolve;\n      });\n      InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);\n      SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);\n\n      if (transformer.start !== undefined) {\n        startPromise_resolve(transformer.start(this._transformStreamController));\n      } else {\n        startPromise_resolve(undefined);\n      }\n    }\n    /**\n     * The readable side of the transform stream.\n     */\n\n\n    _createClass(TransformStream, [{\n      key: \"readable\",\n      get: function get() {\n        if (!IsTransformStream(this)) {\n          throw streamBrandCheckException('readable');\n        }\n\n        return this._readable;\n      }\n      /**\n       * The writable side of the transform stream.\n       */\n\n    }, {\n      key: \"writable\",\n      get: function get() {\n        if (!IsTransformStream(this)) {\n          throw streamBrandCheckException('writable');\n        }\n\n        return this._writable;\n      }\n    }]);\n\n    return TransformStream;\n  }();\n\n  Object.defineProperties(TransformStream.prototype, {\n    readable: {\n      enumerable: true\n    },\n    writable: {\n      enumerable: true\n    }\n  });\n\n  if (_typeof(SymbolPolyfill.toStringTag) === 'symbol') {\n    Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {\n      value: 'TransformStream',\n      configurable: true\n    });\n  }\n\n  function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {\n    function startAlgorithm() {\n      return startPromise;\n    }\n\n    function writeAlgorithm(chunk) {\n      return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);\n    }\n\n    function abortAlgorithm(reason) {\n      return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);\n    }\n\n    function closeAlgorithm() {\n      return TransformStreamDefaultSinkCloseAlgorithm(stream);\n    }\n\n    stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);\n\n    function pullAlgorithm() {\n      return TransformStreamDefaultSourcePullAlgorithm(stream);\n    }\n\n    function cancelAlgorithm(reason) {\n      TransformStreamErrorWritableAndUnblockWrite(stream, reason);\n      return promiseResolvedWith(undefined);\n    }\n\n    stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm); // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.\n\n    stream._backpressure = undefined;\n    stream._backpressureChangePromise = undefined;\n    stream._backpressureChangePromise_resolve = undefined;\n    TransformStreamSetBackpressure(stream, true);\n    stream._transformStreamController = undefined;\n  }\n\n  function IsTransformStream(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {\n      return false;\n    }\n\n    return x instanceof TransformStream;\n  } // This is a no-op if both sides are already errored.\n\n\n  function TransformStreamError(stream, e) {\n    ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);\n    TransformStreamErrorWritableAndUnblockWrite(stream, e);\n  }\n\n  function TransformStreamErrorWritableAndUnblockWrite(stream, e) {\n    TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);\n    WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);\n\n    if (stream._backpressure) {\n      // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()\n      // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time\n      // _backpressure is set.\n      TransformStreamSetBackpressure(stream, false);\n    }\n  }\n\n  function TransformStreamSetBackpressure(stream, backpressure) {\n    // Passes also when called during construction.\n    if (stream._backpressureChangePromise !== undefined) {\n      stream._backpressureChangePromise_resolve();\n    }\n\n    stream._backpressureChangePromise = newPromise(function (resolve) {\n      stream._backpressureChangePromise_resolve = resolve;\n    });\n    stream._backpressure = backpressure;\n  } // Class TransformStreamDefaultController\n\n  /**\n   * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.\n   *\n   * @public\n   */\n\n\n  var TransformStreamDefaultController = /*#__PURE__*/function () {\n    function TransformStreamDefaultController() {\n      _classCallCheck(this, TransformStreamDefaultController);\n\n      throw new TypeError('Illegal constructor');\n    }\n    /**\n     * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.\n     */\n\n\n    _createClass(TransformStreamDefaultController, [{\n      key: \"desiredSize\",\n      get: function get() {\n        if (!IsTransformStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException('desiredSize');\n        }\n\n        var readableController = this._controlledTransformStream._readable._readableStreamController;\n        return ReadableStreamDefaultControllerGetDesiredSize(readableController);\n      }\n    }, {\n      key: \"enqueue\",\n      value: function enqueue() {\n        var chunk = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!IsTransformStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException('enqueue');\n        }\n\n        TransformStreamDefaultControllerEnqueue(this, chunk);\n      }\n      /**\n       * Errors both the readable side and the writable side of the controlled transform stream, making all future\n       * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.\n       */\n\n    }, {\n      key: \"error\",\n      value: function error() {\n        var reason = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n        if (!IsTransformStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException('error');\n        }\n\n        TransformStreamDefaultControllerError(this, reason);\n      }\n      /**\n       * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the\n       * transformer only needs to consume a portion of the chunks written to the writable side.\n       */\n\n    }, {\n      key: \"terminate\",\n      value: function terminate() {\n        if (!IsTransformStreamDefaultController(this)) {\n          throw defaultControllerBrandCheckException('terminate');\n        }\n\n        TransformStreamDefaultControllerTerminate(this);\n      }\n    }]);\n\n    return TransformStreamDefaultController;\n  }();\n\n  Object.defineProperties(TransformStreamDefaultController.prototype, {\n    enqueue: {\n      enumerable: true\n    },\n    error: {\n      enumerable: true\n    },\n    terminate: {\n      enumerable: true\n    },\n    desiredSize: {\n      enumerable: true\n    }\n  });\n\n  if (_typeof(SymbolPolyfill.toStringTag) === 'symbol') {\n    Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {\n      value: 'TransformStreamDefaultController',\n      configurable: true\n    });\n  } // Transform Stream Default Controller Abstract Operations\n\n\n  function IsTransformStreamDefaultController(x) {\n    if (!typeIsObject(x)) {\n      return false;\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {\n      return false;\n    }\n\n    return x instanceof TransformStreamDefaultController;\n  }\n\n  function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {\n    controller._controlledTransformStream = stream;\n    stream._transformStreamController = controller;\n    controller._transformAlgorithm = transformAlgorithm;\n    controller._flushAlgorithm = flushAlgorithm;\n  }\n\n  function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {\n    var controller = Object.create(TransformStreamDefaultController.prototype);\n\n    var transformAlgorithm = function transformAlgorithm(chunk) {\n      try {\n        TransformStreamDefaultControllerEnqueue(controller, chunk);\n        return promiseResolvedWith(undefined);\n      } catch (transformResultE) {\n        return promiseRejectedWith(transformResultE);\n      }\n    };\n\n    var flushAlgorithm = function flushAlgorithm() {\n      return promiseResolvedWith(undefined);\n    };\n\n    if (transformer.transform !== undefined) {\n      transformAlgorithm = function transformAlgorithm(chunk) {\n        return transformer.transform(chunk, controller);\n      };\n    }\n\n    if (transformer.flush !== undefined) {\n      flushAlgorithm = function flushAlgorithm() {\n        return transformer.flush(controller);\n      };\n    }\n\n    SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);\n  }\n\n  function TransformStreamDefaultControllerClearAlgorithms(controller) {\n    controller._transformAlgorithm = undefined;\n    controller._flushAlgorithm = undefined;\n  }\n\n  function TransformStreamDefaultControllerEnqueue(controller, chunk) {\n    var stream = controller._controlledTransformStream;\n    var readableController = stream._readable._readableStreamController;\n\n    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {\n      throw new TypeError('Readable side is not in a state that permits enqueue');\n    } // We throttle transform invocations based on the backpressure of the ReadableStream, but we still\n    // accept TransformStreamDefaultControllerEnqueue() calls.\n\n\n    try {\n      ReadableStreamDefaultControllerEnqueue(readableController, chunk);\n    } catch (e) {\n      // This happens when readableStrategy.size() throws.\n      TransformStreamErrorWritableAndUnblockWrite(stream, e);\n      throw stream._readable._storedError;\n    }\n\n    var backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);\n\n    if (backpressure !== stream._backpressure) {\n      TransformStreamSetBackpressure(stream, true);\n    }\n  }\n\n  function TransformStreamDefaultControllerError(controller, e) {\n    TransformStreamError(controller._controlledTransformStream, e);\n  }\n\n  function TransformStreamDefaultControllerPerformTransform(controller, chunk) {\n    var transformPromise = controller._transformAlgorithm(chunk);\n\n    return transformPromiseWith(transformPromise, undefined, function (r) {\n      TransformStreamError(controller._controlledTransformStream, r);\n      throw r;\n    });\n  }\n\n  function TransformStreamDefaultControllerTerminate(controller) {\n    var stream = controller._controlledTransformStream;\n    var readableController = stream._readable._readableStreamController;\n    ReadableStreamDefaultControllerClose(readableController);\n    var error = new TypeError('TransformStream terminated');\n    TransformStreamErrorWritableAndUnblockWrite(stream, error);\n  } // TransformStreamDefaultSink Algorithms\n\n\n  function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {\n    var controller = stream._transformStreamController;\n\n    if (stream._backpressure) {\n      var backpressureChangePromise = stream._backpressureChangePromise;\n      return transformPromiseWith(backpressureChangePromise, function () {\n        var writable = stream._writable;\n        var state = writable._state;\n\n        if (state === 'erroring') {\n          throw writable._storedError;\n        }\n\n        return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n      });\n    }\n\n    return TransformStreamDefaultControllerPerformTransform(controller, chunk);\n  }\n\n  function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {\n    // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already\n    // errored.\n    TransformStreamError(stream, reason);\n    return promiseResolvedWith(undefined);\n  }\n\n  function TransformStreamDefaultSinkCloseAlgorithm(stream) {\n    // stream._readable cannot change after construction, so caching it across a call to user code is safe.\n    var readable = stream._readable;\n    var controller = stream._transformStreamController;\n\n    var flushPromise = controller._flushAlgorithm();\n\n    TransformStreamDefaultControllerClearAlgorithms(controller); // Return a promise that is fulfilled with undefined on success.\n\n    return transformPromiseWith(flushPromise, function () {\n      if (readable._state === 'errored') {\n        throw readable._storedError;\n      }\n\n      ReadableStreamDefaultControllerClose(readable._readableStreamController);\n    }, function (r) {\n      TransformStreamError(stream, r);\n      throw readable._storedError;\n    });\n  } // TransformStreamDefaultSource Algorithms\n\n\n  function TransformStreamDefaultSourcePullAlgorithm(stream) {\n    // Invariant. Enforced by the promises returned by start() and pull().\n    TransformStreamSetBackpressure(stream, false); // Prevent the next pull() call until there is backpressure.\n\n    return stream._backpressureChangePromise;\n  } // Helper functions for the TransformStreamDefaultController.\n\n\n  function defaultControllerBrandCheckException(name) {\n    return new TypeError(\"TransformStreamDefaultController.prototype.\".concat(name, \" can only be used on a TransformStreamDefaultController\"));\n  } // Helper functions for the TransformStream.\n\n\n  function streamBrandCheckException(name) {\n    return new TypeError(\"TransformStream.prototype.\".concat(name, \" can only be used on a TransformStream\"));\n  }\n\n  exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;\n  exports.CountQueuingStrategy = CountQueuingStrategy;\n  exports.ReadableByteStreamController = ReadableByteStreamController;\n  exports.ReadableStream = ReadableStream;\n  exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;\n  exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;\n  exports.ReadableStreamDefaultController = ReadableStreamDefaultController;\n  exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;\n  exports.TransformStream = TransformStream;\n  exports.TransformStreamDefaultController = TransformStreamDefaultController;\n  exports.WritableStream = WritableStream;\n  exports.WritableStreamDefaultController = WritableStreamDefaultController;\n  exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"module"}