{"ast":null,"code":"\"use strict\";\n\nvar slice = require(\"@sinonjs/commons\").prototypes.string.slice;\n\nvar typeOf = require(\"@sinonjs/commons\").typeOf;\n\nvar valueToString = require(\"@sinonjs/commons\").valueToString;\n/**\n * Creates a string represenation of an iterable object\n *\n * @private\n * @param   {object} obj The iterable object to stringify\n * @returns {string}     A string representation\n */\n\n\nfunction iterableToString(obj) {\n  if (typeOf(obj) === \"map\") {\n    return mapToString(obj);\n  }\n\n  return genericIterableToString(obj);\n}\n/**\n * Creates a string representation of a Map\n *\n * @private\n * @param   {Map} map    The map to stringify\n * @returns {string}     A string representation\n */\n\n\nfunction mapToString(map) {\n  var representation = \"\"; // eslint-disable-next-line @sinonjs/no-prototype-methods/no-prototype-methods\n\n  map.forEach(function (value, key) {\n    representation += \"[\".concat(stringify(key), \",\").concat(stringify(value), \"],\");\n  });\n  representation = slice(representation, 0, -1);\n  return representation;\n}\n/**\n * Create a string represenation for an iterable\n *\n * @private\n * @param   {object} iterable The iterable to stringify\n * @returns {string}          A string representation\n */\n\n\nfunction genericIterableToString(iterable) {\n  var representation = \"\"; // eslint-disable-next-line @sinonjs/no-prototype-methods/no-prototype-methods\n\n  iterable.forEach(function (value) {\n    representation += \"\".concat(stringify(value), \",\");\n  });\n  representation = slice(representation, 0, -1);\n  return representation;\n}\n/**\n * Creates a string representation of the passed `item`\n *\n * @private\n * @param  {object} item The item to stringify\n * @returns {string}      A string representation of `item`\n */\n\n\nfunction stringify(item) {\n  return typeof item === \"string\" ? \"'\".concat(item, \"'\") : valueToString(item);\n}\n\nmodule.exports = iterableToString;","map":null,"metadata":{},"sourceType":"module"}