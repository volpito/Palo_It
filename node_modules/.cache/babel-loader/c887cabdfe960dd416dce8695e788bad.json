{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _asyncIterator(iterable) { var method; if (typeof Symbol !== \"undefined\") { if (Symbol.asyncIterator) method = iterable[Symbol.asyncIterator]; if (method == null && Symbol.iterator) method = iterable[Symbol.iterator]; } if (method == null) method = iterable[\"@@asyncIterator\"]; if (method == null) method = iterable[\"@@iterator\"]; if (method == null) throw new TypeError(\"Object is not async iterable\"); return method.call(iterable); }\n\n/**\n * Body.js\n *\n * Body interface provides common methods for Request and Response\n */\nimport Stream, { PassThrough } from 'stream';\nimport { types } from 'util';\nimport Blob from 'fetch-blob';\nimport { FetchError } from './errors/fetch-error.js';\nimport { FetchBaseError } from './errors/base.js';\nimport { formDataIterator, getBoundary, getFormDataLength } from './utils/form-data.js';\nimport { isBlob, isURLSearchParameters, isFormData } from './utils/is.js';\nvar INTERNALS = Symbol('Body internals');\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\n\nvar Body = /*#__PURE__*/function () {\n  function Body(body) {\n    var _this = this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$size = _ref.size,\n        size = _ref$size === void 0 ? 0 : _ref$size;\n\n    _classCallCheck(this, Body);\n\n    var boundary = null;\n\n    if (body === null) {\n      // Body is undefined or null\n      body = null;\n    } else if (isURLSearchParameters(body)) {\n      // Body is a URLSearchParams\n      body = Buffer.from(body.toString());\n    } else if (isBlob(body)) {// Body is blob\n    } else if (Buffer.isBuffer(body)) {// Body is Buffer\n    } else if (types.isAnyArrayBuffer(body)) {\n      // Body is ArrayBuffer\n      body = Buffer.from(body);\n    } else if (ArrayBuffer.isView(body)) {\n      // Body is ArrayBufferView\n      body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n    } else if (body instanceof Stream) {// Body is stream\n    } else if (isFormData(body)) {\n      // Body is an instance of formdata-node\n      boundary = \"NodeFetchFormDataBoundary\".concat(getBoundary());\n      body = Stream.Readable.from(formDataIterator(body, boundary));\n    } else {\n      // None of the above\n      // coerce to string then buffer\n      body = Buffer.from(String(body));\n    }\n\n    this[INTERNALS] = {\n      body: body,\n      boundary: boundary,\n      disturbed: false,\n      error: null\n    };\n    this.size = size;\n\n    if (body instanceof Stream) {\n      body.on('error', function (error_) {\n        var error = error_ instanceof FetchBaseError ? error_ : new FetchError(\"Invalid response body while trying to fetch \".concat(_this.url, \": \").concat(error_.message), 'system', error_);\n        _this[INTERNALS].error = error;\n      });\n    }\n  }\n\n  _createClass(Body, [{\n    key: \"body\",\n    get: function get() {\n      return this[INTERNALS].body;\n    }\n  }, {\n    key: \"bodyUsed\",\n    get: function get() {\n      return this[INTERNALS].disturbed;\n    }\n    /**\n     * Decode response as ArrayBuffer\n     *\n     * @return  Promise\n     */\n\n  }, {\n    key: \"arrayBuffer\",\n    value: function () {\n      var _arrayBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$consumeBody, buffer, byteOffset, byteLength;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return consumeBody(this);\n\n              case 2:\n                _yield$consumeBody = _context2.sent;\n                buffer = _yield$consumeBody.buffer;\n                byteOffset = _yield$consumeBody.byteOffset;\n                byteLength = _yield$consumeBody.byteLength;\n                return _context2.abrupt(\"return\", buffer.slice(byteOffset, byteOffset + byteLength));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function arrayBuffer() {\n        return _arrayBuffer.apply(this, arguments);\n      }\n\n      return arrayBuffer;\n    }()\n    /**\n     * Return raw response as Blob\n     *\n     * @return Promise\n     */\n\n  }, {\n    key: \"blob\",\n    value: function () {\n      var _blob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var ct, buf;\n        return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                ct = this.headers && this.headers.get('content-type') || this[INTERNALS].body && this[INTERNALS].body.type || '';\n                _context3.next = 3;\n                return this.buffer();\n\n              case 3:\n                buf = _context3.sent;\n                return _context3.abrupt(\"return\", new Blob([buf], {\n                  type: ct\n                }));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function blob() {\n        return _blob.apply(this, arguments);\n      }\n\n      return blob;\n    }()\n    /**\n     * Decode response as json\n     *\n     * @return  Promise\n     */\n\n  }, {\n    key: \"json\",\n    value: function () {\n      var _json = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var buffer;\n        return _regeneratorRuntime.wrap(function _callee3$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return consumeBody(this);\n\n              case 2:\n                buffer = _context4.sent;\n                return _context4.abrupt(\"return\", JSON.parse(buffer.toString()));\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function json() {\n        return _json.apply(this, arguments);\n      }\n\n      return json;\n    }()\n    /**\n     * Decode response as text\n     *\n     * @return  Promise\n     */\n\n  }, {\n    key: \"text\",\n    value: function () {\n      var _text = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var buffer;\n        return _regeneratorRuntime.wrap(function _callee4$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return consumeBody(this);\n\n              case 2:\n                buffer = _context5.sent;\n                return _context5.abrupt(\"return\", buffer.toString());\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function text() {\n        return _text.apply(this, arguments);\n      }\n\n      return text;\n    }()\n    /**\n     * Decode response as buffer (non-spec api)\n     *\n     * @return  Promise\n     */\n\n  }, {\n    key: \"buffer\",\n    value: function buffer() {\n      return consumeBody(this);\n    }\n  }]);\n\n  return Body;\n}(); // In browsers, all properties are enumerable.\n\n\nexport { Body as default };\nObject.defineProperties(Body.prototype, {\n  body: {\n    enumerable: true\n  },\n  bodyUsed: {\n    enumerable: true\n  },\n  arrayBuffer: {\n    enumerable: true\n  },\n  blob: {\n    enumerable: true\n  },\n  json: {\n    enumerable: true\n  },\n  text: {\n    enumerable: true\n  }\n});\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return Promise\n */\n\nfunction consumeBody(data) {\n  var body, accum, accumBytes, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk, error, error_;\n\n  return _regeneratorRuntime.async(function consumeBody$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!data[INTERNALS].disturbed) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new TypeError(\"body used already for: \".concat(data.url));\n\n        case 2:\n          data[INTERNALS].disturbed = true;\n\n          if (!data[INTERNALS].error) {\n            _context.next = 5;\n            break;\n          }\n\n          throw data[INTERNALS].error;\n\n        case 5:\n          body = data.body; // Body is null\n\n          if (!(body === null)) {\n            _context.next = 8;\n            break;\n          }\n\n          return _context.abrupt(\"return\", Buffer.alloc(0));\n\n        case 8:\n          // Body is blob\n          if (isBlob(body)) {\n            body = Stream.Readable.from(body.stream());\n          } // Body is buffer\n\n\n          if (!Buffer.isBuffer(body)) {\n            _context.next = 11;\n            break;\n          }\n\n          return _context.abrupt(\"return\", body);\n\n        case 11:\n          if (body instanceof Stream) {\n            _context.next = 13;\n            break;\n          }\n\n          return _context.abrupt(\"return\", Buffer.alloc(0));\n\n        case 13:\n          // Body is stream\n          // get ready to actually consume the body\n          accum = [];\n          accumBytes = 0;\n          _context.prev = 15;\n          _iteratorAbruptCompletion = false;\n          _didIteratorError = false;\n          _context.prev = 18;\n          _iterator = _asyncIterator(body);\n\n        case 20:\n          _context.next = 22;\n          return _regeneratorRuntime.awrap(_iterator.next());\n\n        case 22:\n          if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n            _context.next = 33;\n            break;\n          }\n\n          chunk = _step.value;\n\n          if (!(data.size > 0 && accumBytes + chunk.length > data.size)) {\n            _context.next = 28;\n            break;\n          }\n\n          error = new FetchError(\"content size at \".concat(data.url, \" over limit: \").concat(data.size), 'max-size');\n          body.destroy(error);\n          throw error;\n\n        case 28:\n          accumBytes += chunk.length;\n          accum.push(chunk);\n\n        case 30:\n          _iteratorAbruptCompletion = false;\n          _context.next = 20;\n          break;\n\n        case 33:\n          _context.next = 39;\n          break;\n\n        case 35:\n          _context.prev = 35;\n          _context.t0 = _context[\"catch\"](18);\n          _didIteratorError = true;\n          _iteratorError = _context.t0;\n\n        case 39:\n          _context.prev = 39;\n          _context.prev = 40;\n\n          if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n            _context.next = 44;\n            break;\n          }\n\n          _context.next = 44;\n          return _regeneratorRuntime.awrap(_iterator.return());\n\n        case 44:\n          _context.prev = 44;\n\n          if (!_didIteratorError) {\n            _context.next = 47;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 47:\n          return _context.finish(44);\n\n        case 48:\n          return _context.finish(39);\n\n        case 49:\n          _context.next = 55;\n          break;\n\n        case 51:\n          _context.prev = 51;\n          _context.t1 = _context[\"catch\"](15);\n          error_ = _context.t1 instanceof FetchBaseError ? _context.t1 : new FetchError(\"Invalid response body while trying to fetch \".concat(data.url, \": \").concat(_context.t1.message), 'system', _context.t1);\n          throw error_;\n\n        case 55:\n          if (!(body.readableEnded === true || body._readableState.ended === true)) {\n            _context.next = 67;\n            break;\n          }\n\n          _context.prev = 56;\n\n          if (!accum.every(function (c) {\n            return typeof c === 'string';\n          })) {\n            _context.next = 59;\n            break;\n          }\n\n          return _context.abrupt(\"return\", Buffer.from(accum.join('')));\n\n        case 59:\n          return _context.abrupt(\"return\", Buffer.concat(accum, accumBytes));\n\n        case 62:\n          _context.prev = 62;\n          _context.t2 = _context[\"catch\"](56);\n          throw new FetchError(\"Could not create Buffer from response body for \".concat(data.url, \": \").concat(_context.t2.message), 'system', _context.t2);\n\n        case 65:\n          _context.next = 68;\n          break;\n\n        case 67:\n          throw new FetchError(\"Premature close of server response while trying to fetch \".concat(data.url));\n\n        case 68:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[15, 51], [18, 35, 39, 49], [40,, 44, 48], [56, 62]], Promise);\n}\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed   instance       Response or Request instance\n * @param   String  highWaterMark  highWaterMark for both PassThrough body streams\n * @return  Mixed\n */\n\n\nexport var clone = function clone(instance, highWaterMark) {\n  var p1;\n  var p2;\n  var body = instance.body; // Don't allow cloning a used body\n\n  if (instance.bodyUsed) {\n    throw new Error('cannot clone body after it is used');\n  } // Check that body is a stream and not form-data object\n  // note: we can't clone the form-data object without having it as a dependency\n\n\n  if (body instanceof Stream && typeof body.getBoundary !== 'function') {\n    // Tee instance body\n    p1 = new PassThrough({\n      highWaterMark: highWaterMark\n    });\n    p2 = new PassThrough({\n      highWaterMark: highWaterMark\n    });\n    body.pipe(p1);\n    body.pipe(p2); // Set instance body to teed body and return the other teed body\n\n    instance[INTERNALS].body = p1;\n    body = p2;\n  }\n\n  return body;\n};\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param {any} body Any options.body input\n * @returns {string | null}\n */\n\nexport var extractContentType = function extractContentType(body, request) {\n  // Body is null or undefined\n  if (body === null) {\n    return null;\n  } // Body is string\n\n\n  if (typeof body === 'string') {\n    return 'text/plain;charset=UTF-8';\n  } // Body is a URLSearchParams\n\n\n  if (isURLSearchParameters(body)) {\n    return 'application/x-www-form-urlencoded;charset=UTF-8';\n  } // Body is blob\n\n\n  if (isBlob(body)) {\n    return body.type || null;\n  } // Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)\n\n\n  if (Buffer.isBuffer(body) || types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {\n    return null;\n  } // Detect form data input from form-data module\n\n\n  if (body && typeof body.getBoundary === 'function') {\n    return \"multipart/form-data;boundary=\".concat(body.getBoundary());\n  }\n\n  if (isFormData(body)) {\n    return \"multipart/form-data; boundary=\".concat(request[INTERNALS].boundary);\n  } // Body is stream - can't really do much about this\n\n\n  if (body instanceof Stream) {\n    return null;\n  } // Body constructor defaults other things to string\n\n\n  return 'text/plain;charset=UTF-8';\n};\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param {any} obj.body Body object from the Body instance.\n * @returns {number | null}\n */\n\nexport var getTotalBytes = function getTotalBytes(request) {\n  var body = request.body; // Body is null or undefined\n\n  if (body === null) {\n    return 0;\n  } // Body is Blob\n\n\n  if (isBlob(body)) {\n    return body.size;\n  } // Body is Buffer\n\n\n  if (Buffer.isBuffer(body)) {\n    return body.length;\n  } // Detect form data input from form-data module\n\n\n  if (body && typeof body.getLengthSync === 'function') {\n    return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;\n  } // Body is a spec-compliant form-data\n\n\n  if (isFormData(body)) {\n    return getFormDataLength(request[INTERNALS].boundary);\n  } // Body is stream\n\n\n  return null;\n};\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param {Stream.Writable} dest The stream to write to.\n * @param obj.body Body object from the Body instance.\n * @returns {void}\n */\n\nexport var writeToStream = function writeToStream(dest, _ref2) {\n  var body = _ref2.body;\n\n  if (body === null) {\n    // Body is null\n    dest.end();\n  } else if (isBlob(body)) {\n    // Body is Blob\n    Stream.Readable.from(body.stream()).pipe(dest);\n  } else if (Buffer.isBuffer(body)) {\n    // Body is buffer\n    dest.write(body);\n    dest.end();\n  } else {\n    // Body is stream\n    body.pipe(dest);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}