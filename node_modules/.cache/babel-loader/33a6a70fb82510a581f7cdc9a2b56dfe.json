{"ast":null,"code":"\"use strict\";\n/**\n * Returns `true` when the value is a regular Object and not a specialized Object\n *\n * This helps speed up deepEqual cyclic checks\n *\n * The premise is that only Objects are stored in the visited array.\n * So if this function returns false, we don't have to do the\n * expensive operation of searching for the value in the the array of already\n * visited objects\n *\n * @private\n * @param  {object}   value The object to examine\n * @returns {boolean}       `true` when the object is a non-specialised object\n */\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction isObject(value) {\n  return _typeof(value) === \"object\" && value !== null && // none of these are collection objects, so we can return false\n  !(value instanceof Boolean) && !(value instanceof Date) && !(value instanceof Error) && !(value instanceof Number) && !(value instanceof RegExp) && !(value instanceof String);\n}\n\nmodule.exports = isObject;","map":null,"metadata":{},"sourceType":"module"}