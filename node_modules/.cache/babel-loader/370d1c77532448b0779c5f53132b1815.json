{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar hasMap = typeof Map === 'function' && Map.prototype;\nvar mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, 'size') : null;\nvar mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === 'function' ? mapSizeDescriptor.get : null;\nvar mapForEach = hasMap && Map.prototype.forEach;\nvar hasSet = typeof Set === 'function' && Set.prototype;\nvar setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, 'size') : null;\nvar setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === 'function' ? setSizeDescriptor.get : null;\nvar setForEach = hasSet && Set.prototype.forEach;\nvar hasWeakMap = typeof WeakMap === 'function' && WeakMap.prototype;\nvar weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;\nvar hasWeakSet = typeof WeakSet === 'function' && WeakSet.prototype;\nvar weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;\nvar hasWeakRef = typeof WeakRef === 'function' && WeakRef.prototype;\nvar weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;\nvar booleanValueOf = Boolean.prototype.valueOf;\nvar objectToString = Object.prototype.toString;\nvar functionToString = Function.prototype.toString;\nvar match = String.prototype.match;\nvar bigIntValueOf = typeof BigInt === 'function' ? BigInt.prototype.valueOf : null;\nvar gOPS = Object.getOwnPropertySymbols;\nvar symToString = typeof Symbol === 'function' && _typeof(Symbol.iterator) === 'symbol' ? Symbol.prototype.toString : null;\nvar hasShammedSymbols = typeof Symbol === 'function' && _typeof(Symbol.iterator) === 'object';\nvar isEnumerable = Object.prototype.propertyIsEnumerable;\nvar gPO = (typeof Reflect === 'function' ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype // eslint-disable-line no-proto\n? function (O) {\n  return O.__proto__; // eslint-disable-line no-proto\n} : null);\n\nvar inspectCustom = require('./util.inspect').custom;\n\nvar inspectSymbol = inspectCustom && isSymbol(inspectCustom) ? inspectCustom : null;\nvar toStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag !== 'undefined' ? Symbol.toStringTag : null;\n\nmodule.exports = function inspect_(obj, options, depth, seen) {\n  var opts = options || {};\n\n  if (has(opts, 'quoteStyle') && opts.quoteStyle !== 'single' && opts.quoteStyle !== 'double') {\n    throw new TypeError('option \"quoteStyle\" must be \"single\" or \"double\"');\n  }\n\n  if (has(opts, 'maxStringLength') && (typeof opts.maxStringLength === 'number' ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) {\n    throw new TypeError('option \"maxStringLength\", if provided, must be a positive integer, Infinity, or `null`');\n  }\n\n  var customInspect = has(opts, 'customInspect') ? opts.customInspect : true;\n\n  if (typeof customInspect !== 'boolean' && customInspect !== 'symbol') {\n    throw new TypeError('option \"customInspect\", if provided, must be `true`, `false`, or `\\'symbol\\'`');\n  }\n\n  if (has(opts, 'indent') && opts.indent !== null && opts.indent !== '\\t' && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) {\n    throw new TypeError('options \"indent\" must be \"\\\\t\", an integer > 0, or `null`');\n  }\n\n  if (typeof obj === 'undefined') {\n    return 'undefined';\n  }\n\n  if (obj === null) {\n    return 'null';\n  }\n\n  if (typeof obj === 'boolean') {\n    return obj ? 'true' : 'false';\n  }\n\n  if (typeof obj === 'string') {\n    return inspectString(obj, opts);\n  }\n\n  if (typeof obj === 'number') {\n    if (obj === 0) {\n      return Infinity / obj > 0 ? '0' : '-0';\n    }\n\n    return String(obj);\n  }\n\n  if (typeof obj === 'bigint') {\n    return String(obj) + 'n';\n  }\n\n  var maxDepth = typeof opts.depth === 'undefined' ? 5 : opts.depth;\n\n  if (typeof depth === 'undefined') {\n    depth = 0;\n  }\n\n  if (depth >= maxDepth && maxDepth > 0 && _typeof(obj) === 'object') {\n    return isArray(obj) ? '[Array]' : '[Object]';\n  }\n\n  var indent = getIndent(opts, depth);\n\n  if (typeof seen === 'undefined') {\n    seen = [];\n  } else if (indexOf(seen, obj) >= 0) {\n    return '[Circular]';\n  }\n\n  function inspect(value, from, noIndent) {\n    if (from) {\n      seen = seen.slice();\n      seen.push(from);\n    }\n\n    if (noIndent) {\n      var newOpts = {\n        depth: opts.depth\n      };\n\n      if (has(opts, 'quoteStyle')) {\n        newOpts.quoteStyle = opts.quoteStyle;\n      }\n\n      return inspect_(value, newOpts, depth + 1, seen);\n    }\n\n    return inspect_(value, opts, depth + 1, seen);\n  }\n\n  if (typeof obj === 'function') {\n    var name = nameOf(obj);\n    var keys = arrObjKeys(obj, inspect);\n    return '[Function' + (name ? ': ' + name : ' (anonymous)') + ']' + (keys.length > 0 ? ' { ' + keys.join(', ') + ' }' : '');\n  }\n\n  if (isSymbol(obj)) {\n    var symString = hasShammedSymbols ? String(obj).replace(/^(Symbol\\(.*\\))_[^)]*$/, '$1') : symToString.call(obj);\n    return _typeof(obj) === 'object' && !hasShammedSymbols ? markBoxed(symString) : symString;\n  }\n\n  if (isElement(obj)) {\n    var s = '<' + String(obj.nodeName).toLowerCase();\n    var attrs = obj.attributes || [];\n\n    for (var i = 0; i < attrs.length; i++) {\n      s += ' ' + attrs[i].name + '=' + wrapQuotes(quote(attrs[i].value), 'double', opts);\n    }\n\n    s += '>';\n\n    if (obj.childNodes && obj.childNodes.length) {\n      s += '...';\n    }\n\n    s += '</' + String(obj.nodeName).toLowerCase() + '>';\n    return s;\n  }\n\n  if (isArray(obj)) {\n    if (obj.length === 0) {\n      return '[]';\n    }\n\n    var xs = arrObjKeys(obj, inspect);\n\n    if (indent && !singleLineValues(xs)) {\n      return '[' + indentedJoin(xs, indent) + ']';\n    }\n\n    return '[ ' + xs.join(', ') + ' ]';\n  }\n\n  if (isError(obj)) {\n    var parts = arrObjKeys(obj, inspect);\n\n    if (parts.length === 0) {\n      return '[' + String(obj) + ']';\n    }\n\n    return '{ [' + String(obj) + '] ' + parts.join(', ') + ' }';\n  }\n\n  if (_typeof(obj) === 'object' && customInspect) {\n    if (inspectSymbol && typeof obj[inspectSymbol] === 'function') {\n      return obj[inspectSymbol]();\n    } else if (customInspect !== 'symbol' && typeof obj.inspect === 'function') {\n      return obj.inspect();\n    }\n  }\n\n  if (isMap(obj)) {\n    var mapParts = [];\n    mapForEach.call(obj, function (value, key) {\n      mapParts.push(inspect(key, obj, true) + ' => ' + inspect(value, obj));\n    });\n    return collectionOf('Map', mapSize.call(obj), mapParts, indent);\n  }\n\n  if (isSet(obj)) {\n    var setParts = [];\n    setForEach.call(obj, function (value) {\n      setParts.push(inspect(value, obj));\n    });\n    return collectionOf('Set', setSize.call(obj), setParts, indent);\n  }\n\n  if (isWeakMap(obj)) {\n    return weakCollectionOf('WeakMap');\n  }\n\n  if (isWeakSet(obj)) {\n    return weakCollectionOf('WeakSet');\n  }\n\n  if (isWeakRef(obj)) {\n    return weakCollectionOf('WeakRef');\n  }\n\n  if (isNumber(obj)) {\n    return markBoxed(inspect(Number(obj)));\n  }\n\n  if (isBigInt(obj)) {\n    return markBoxed(inspect(bigIntValueOf.call(obj)));\n  }\n\n  if (isBoolean(obj)) {\n    return markBoxed(booleanValueOf.call(obj));\n  }\n\n  if (isString(obj)) {\n    return markBoxed(inspect(String(obj)));\n  }\n\n  if (!isDate(obj) && !isRegExp(obj)) {\n    var ys = arrObjKeys(obj, inspect);\n    var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;\n    var protoTag = obj instanceof Object ? '' : 'null prototype';\n    var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? toStr(obj).slice(8, -1) : protoTag ? 'Object' : '';\n    var constructorTag = isPlainObject || typeof obj.constructor !== 'function' ? '' : obj.constructor.name ? obj.constructor.name + ' ' : '';\n    var tag = constructorTag + (stringTag || protoTag ? '[' + [].concat(stringTag || [], protoTag || []).join(': ') + '] ' : '');\n\n    if (ys.length === 0) {\n      return tag + '{}';\n    }\n\n    if (indent) {\n      return tag + '{' + indentedJoin(ys, indent) + '}';\n    }\n\n    return tag + '{ ' + ys.join(', ') + ' }';\n  }\n\n  return String(obj);\n};\n\nfunction wrapQuotes(s, defaultStyle, opts) {\n  var quoteChar = (opts.quoteStyle || defaultStyle) === 'double' ? '\"' : \"'\";\n  return quoteChar + s + quoteChar;\n}\n\nfunction quote(s) {\n  return String(s).replace(/\"/g, '&quot;');\n}\n\nfunction isArray(obj) {\n  return toStr(obj) === '[object Array]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));\n}\n\nfunction isDate(obj) {\n  return toStr(obj) === '[object Date]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));\n}\n\nfunction isRegExp(obj) {\n  return toStr(obj) === '[object RegExp]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));\n}\n\nfunction isError(obj) {\n  return toStr(obj) === '[object Error]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));\n}\n\nfunction isString(obj) {\n  return toStr(obj) === '[object String]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));\n}\n\nfunction isNumber(obj) {\n  return toStr(obj) === '[object Number]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));\n}\n\nfunction isBoolean(obj) {\n  return toStr(obj) === '[object Boolean]' && (!toStringTag || !(_typeof(obj) === 'object' && toStringTag in obj));\n} // Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives\n\n\nfunction isSymbol(obj) {\n  if (hasShammedSymbols) {\n    return obj && _typeof(obj) === 'object' && obj instanceof Symbol;\n  }\n\n  if (_typeof(obj) === 'symbol') {\n    return true;\n  }\n\n  if (!obj || _typeof(obj) !== 'object' || !symToString) {\n    return false;\n  }\n\n  try {\n    symToString.call(obj);\n    return true;\n  } catch (e) {}\n\n  return false;\n}\n\nfunction isBigInt(obj) {\n  if (!obj || _typeof(obj) !== 'object' || !bigIntValueOf) {\n    return false;\n  }\n\n  try {\n    bigIntValueOf.call(obj);\n    return true;\n  } catch (e) {}\n\n  return false;\n}\n\nvar hasOwn = Object.prototype.hasOwnProperty || function (key) {\n  return key in this;\n};\n\nfunction has(obj, key) {\n  return hasOwn.call(obj, key);\n}\n\nfunction toStr(obj) {\n  return objectToString.call(obj);\n}\n\nfunction nameOf(f) {\n  if (f.name) {\n    return f.name;\n  }\n\n  var m = match.call(functionToString.call(f), /^function\\s*([\\w$]+)/);\n\n  if (m) {\n    return m[1];\n  }\n\n  return null;\n}\n\nfunction indexOf(xs, x) {\n  if (xs.indexOf) {\n    return xs.indexOf(x);\n  }\n\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nfunction isMap(x) {\n  if (!mapSize || !x || _typeof(x) !== 'object') {\n    return false;\n  }\n\n  try {\n    mapSize.call(x);\n\n    try {\n      setSize.call(x);\n    } catch (s) {\n      return true;\n    }\n\n    return x instanceof Map; // core-js workaround, pre-v2.5.0\n  } catch (e) {}\n\n  return false;\n}\n\nfunction isWeakMap(x) {\n  if (!weakMapHas || !x || _typeof(x) !== 'object') {\n    return false;\n  }\n\n  try {\n    weakMapHas.call(x, weakMapHas);\n\n    try {\n      weakSetHas.call(x, weakSetHas);\n    } catch (s) {\n      return true;\n    }\n\n    return x instanceof WeakMap; // core-js workaround, pre-v2.5.0\n  } catch (e) {}\n\n  return false;\n}\n\nfunction isWeakRef(x) {\n  if (!weakRefDeref || !x || _typeof(x) !== 'object') {\n    return false;\n  }\n\n  try {\n    weakRefDeref.call(x);\n    return true;\n  } catch (e) {}\n\n  return false;\n}\n\nfunction isSet(x) {\n  if (!setSize || !x || _typeof(x) !== 'object') {\n    return false;\n  }\n\n  try {\n    setSize.call(x);\n\n    try {\n      mapSize.call(x);\n    } catch (m) {\n      return true;\n    }\n\n    return x instanceof Set; // core-js workaround, pre-v2.5.0\n  } catch (e) {}\n\n  return false;\n}\n\nfunction isWeakSet(x) {\n  if (!weakSetHas || !x || _typeof(x) !== 'object') {\n    return false;\n  }\n\n  try {\n    weakSetHas.call(x, weakSetHas);\n\n    try {\n      weakMapHas.call(x, weakMapHas);\n    } catch (s) {\n      return true;\n    }\n\n    return x instanceof WeakSet; // core-js workaround, pre-v2.5.0\n  } catch (e) {}\n\n  return false;\n}\n\nfunction isElement(x) {\n  if (!x || _typeof(x) !== 'object') {\n    return false;\n  }\n\n  if (typeof HTMLElement !== 'undefined' && x instanceof HTMLElement) {\n    return true;\n  }\n\n  return typeof x.nodeName === 'string' && typeof x.getAttribute === 'function';\n}\n\nfunction inspectString(str, opts) {\n  if (str.length > opts.maxStringLength) {\n    var remaining = str.length - opts.maxStringLength;\n    var trailer = '... ' + remaining + ' more character' + (remaining > 1 ? 's' : '');\n    return inspectString(str.slice(0, opts.maxStringLength), opts) + trailer;\n  } // eslint-disable-next-line no-control-regex\n\n\n  var s = str.replace(/(['\\\\])/g, '\\\\$1').replace(/[\\x00-\\x1f]/g, lowbyte);\n  return wrapQuotes(s, 'single', opts);\n}\n\nfunction lowbyte(c) {\n  var n = c.charCodeAt(0);\n  var x = {\n    8: 'b',\n    9: 't',\n    10: 'n',\n    12: 'f',\n    13: 'r'\n  }[n];\n\n  if (x) {\n    return '\\\\' + x;\n  }\n\n  return '\\\\x' + (n < 0x10 ? '0' : '') + n.toString(16).toUpperCase();\n}\n\nfunction markBoxed(str) {\n  return 'Object(' + str + ')';\n}\n\nfunction weakCollectionOf(type) {\n  return type + ' { ? }';\n}\n\nfunction collectionOf(type, size, entries, indent) {\n  var joinedEntries = indent ? indentedJoin(entries, indent) : entries.join(', ');\n  return type + ' (' + size + ') {' + joinedEntries + '}';\n}\n\nfunction singleLineValues(xs) {\n  for (var i = 0; i < xs.length; i++) {\n    if (indexOf(xs[i], '\\n') >= 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getIndent(opts, depth) {\n  var baseIndent;\n\n  if (opts.indent === '\\t') {\n    baseIndent = '\\t';\n  } else if (typeof opts.indent === 'number' && opts.indent > 0) {\n    baseIndent = Array(opts.indent + 1).join(' ');\n  } else {\n    return null;\n  }\n\n  return {\n    base: baseIndent,\n    prev: Array(depth + 1).join(baseIndent)\n  };\n}\n\nfunction indentedJoin(xs, indent) {\n  if (xs.length === 0) {\n    return '';\n  }\n\n  var lineJoiner = '\\n' + indent.prev + indent.base;\n  return lineJoiner + xs.join(',' + lineJoiner) + '\\n' + indent.prev;\n}\n\nfunction arrObjKeys(obj, inspect) {\n  var isArr = isArray(obj);\n  var xs = [];\n\n  if (isArr) {\n    xs.length = obj.length;\n\n    for (var i = 0; i < obj.length; i++) {\n      xs[i] = has(obj, i) ? inspect(obj[i], obj) : '';\n    }\n  }\n\n  var syms = typeof gOPS === 'function' ? gOPS(obj) : [];\n  var symMap;\n\n  if (hasShammedSymbols) {\n    symMap = {};\n\n    for (var k = 0; k < syms.length; k++) {\n      symMap['$' + syms[k]] = syms[k];\n    }\n  }\n\n  for (var key in obj) {\n    // eslint-disable-line no-restricted-syntax\n    if (!has(obj, key)) {\n      continue;\n    } // eslint-disable-line no-restricted-syntax, no-continue\n\n\n    if (isArr && String(Number(key)) === key && key < obj.length) {\n      continue;\n    } // eslint-disable-line no-restricted-syntax, no-continue\n\n\n    if (hasShammedSymbols && symMap['$' + key] instanceof Symbol) {\n      // this is to prevent shammed Symbols, which are stored as strings, from being included in the string key section\n      continue; // eslint-disable-line no-restricted-syntax, no-continue\n    } else if (/[^\\w$]/.test(key)) {\n      xs.push(inspect(key, obj) + ': ' + inspect(obj[key], obj));\n    } else {\n      xs.push(key + ': ' + inspect(obj[key], obj));\n    }\n  }\n\n  if (typeof gOPS === 'function') {\n    for (var j = 0; j < syms.length; j++) {\n      if (isEnumerable.call(obj, syms[j])) {\n        xs.push('[' + inspect(syms[j]) + ']: ' + inspect(obj[syms[j]], obj));\n      }\n    }\n  }\n\n  return xs;\n}","map":null,"metadata":{},"sourceType":"module"}