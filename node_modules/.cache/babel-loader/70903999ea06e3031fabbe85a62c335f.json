{"ast":null,"code":"\"use strict\";\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.subselects = exports.getNextSiblings = exports.ensureIsTag = exports.PLACEHOLDER_ELEMENT = void 0;\n\nvar boolbase_1 = require(\"boolbase\");\n\nvar procedure_1 = require(\"../procedure\");\n/** Used as a placeholder for :has. Will be replaced with the actual element. */\n\n\nexports.PLACEHOLDER_ELEMENT = {};\n\nfunction ensureIsTag(next, adapter) {\n  if (next === boolbase_1.falseFunc) return boolbase_1.falseFunc;\n  return function (elem) {\n    return adapter.isTag(elem) && next(elem);\n  };\n}\n\nexports.ensureIsTag = ensureIsTag;\n\nfunction getNextSiblings(elem, adapter) {\n  var siblings = adapter.getSiblings(elem);\n  if (siblings.length <= 1) return [];\n  var elemIndex = siblings.indexOf(elem);\n  if (elemIndex < 0 || elemIndex === siblings.length - 1) return [];\n  return siblings.slice(elemIndex + 1).filter(adapter.isTag);\n}\n\nexports.getNextSiblings = getNextSiblings;\n\nvar is = function is(next, token, options, context, compileToken) {\n  var opts = {\n    xmlMode: !!options.xmlMode,\n    adapter: options.adapter,\n    equals: options.equals\n  };\n  var func = compileToken(token, opts, context);\n  return function (elem) {\n    return func(elem) && next(elem);\n  };\n};\n/*\n * :not, :has, :is and :matches have to compile selectors\n * doing this in src/pseudos.ts would lead to circular dependencies,\n * so we add them here\n */\n\n\nexports.subselects = {\n  is: is,\n\n  /**\n   * `:matches` is an alias for `:is`.\n   */\n  matches: is,\n  not: function not(next, token, options, context, compileToken) {\n    var opts = {\n      xmlMode: !!options.xmlMode,\n      adapter: options.adapter,\n      equals: options.equals\n    };\n    var func = compileToken(token, opts, context);\n    if (func === boolbase_1.falseFunc) return next;\n    if (func === boolbase_1.trueFunc) return boolbase_1.falseFunc;\n    return function not(elem) {\n      return !func(elem) && next(elem);\n    };\n  },\n  has: function has(next, subselect, options, _context, compileToken) {\n    var adapter = options.adapter;\n    var opts = {\n      xmlMode: !!options.xmlMode,\n      adapter: adapter,\n      equals: options.equals\n    }; // @ts-expect-error Uses an array as a pointer to the current element (side effects)\n\n    var context = subselect.some(function (s) {\n      return s.some(procedure_1.isTraversal);\n    }) ? [exports.PLACEHOLDER_ELEMENT] : undefined;\n    var compiled = compileToken(subselect, opts, context);\n    if (compiled === boolbase_1.falseFunc) return boolbase_1.falseFunc;\n\n    if (compiled === boolbase_1.trueFunc) {\n      return function (elem) {\n        return adapter.getChildren(elem).some(adapter.isTag) && next(elem);\n      };\n    }\n\n    var hasElement = ensureIsTag(compiled, adapter);\n    var _a = compiled.shouldTestNextSiblings,\n        shouldTestNextSiblings = _a === void 0 ? false : _a;\n    /*\n     * `shouldTestNextSiblings` will only be true if the query starts with\n     * a traversal (sibling or adjacent). That means we will always have a context.\n     */\n\n    if (context) {\n      return function (elem) {\n        context[0] = elem;\n        var childs = adapter.getChildren(elem);\n        var nextElements = shouldTestNextSiblings ? __spreadArray(__spreadArray([], childs), getNextSiblings(elem, adapter)) : childs;\n        return next(elem) && adapter.existsOne(hasElement, nextElements);\n      };\n    }\n\n    return function (elem) {\n      return next(elem) && adapter.existsOne(hasElement, adapter.getChildren(elem));\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}